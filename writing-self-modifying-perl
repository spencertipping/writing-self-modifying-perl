#!/usr/bin/perl
# Run perldoc on this file for documentation.

$|++;

my %data;
my %transient;
my %externalized_functions;
my %datatypes;

my %locations;          # Maps eval-numbers to attribute names

sub meta::define_form {
  my ($namespace, $delegate) = @_;
  $datatypes{$namespace} = $delegate;
  *{"meta::${namespace}::implementation"} = $delegate;
  *{"meta::$namespace"} = sub {
    my ($name, $value, %options) = @_;
    chomp $value;
    $data{"${namespace}::$name"} = $value unless $options{no_binding};
    $delegate->($name, $value) unless $options{no_delegate}}}

sub meta::eval_in {
  my ($what, $where) = @_;

  # Obtain next eval-number and alias it to the designated location
  @locations{eval('__FILE__') =~ /\(eval (\d+)\)/} = ($where);

  my $result = eval $what;
  $@ =~ s/\(eval \d+\)/$where/ if $@;
  warn $@ if $@;
  $result}

meta::define_form 'meta', sub {
  my ($name, $value) = @_;
  meta::eval_in($value, "meta::$name")};

meta::meta('configure', <<'__25976e07665878d3fae18f050160343f');
# A function to configure transients. Transients can be used to store any number of
# different things, but one of the more common usages is type descriptors.

sub meta::configure {
  my ($datatype, %options) = @_;
  $transient{$_}{$datatype} = $options{$_} for keys %options;
}
__25976e07665878d3fae18f050160343f
meta::meta('externalize', <<'__9141b4e8752515391385516ae94b23b5');
# Function externalization. Data types should call this method when defining a function
# that has an external interface.

sub meta::externalize {
  my ($name, $attribute, $implementation) = @_;
  $externalized_functions{$name} = $attribute;
  *{"::$name"} = $implementation || $attribute;
}
__9141b4e8752515391385516ae94b23b5
meta::meta('externalize_template', <<'__1e90e7ccb5fea1d498bbaaa6e7e43851');
sub meta::externalize_template {
  my ($name, $implementation) = @_;
  meta::externalize "template::$name", "template::$name", $implementation;
}
__1e90e7ccb5fea1d498bbaaa6e7e43851
meta::meta('functor::code-templates', <<'__8438e73e45c87188c8b46d0c43eb4971');
package code;

# Templates for generating named source files.
sub template {
  my ($name, $implementation) = @_;
  $implementation ||= sub {
    my ($line, $block) = @_;
    my $append         = $line =~ s/^\h*>>\h*//o;

    $line =~ s/\s+.*$//o;
    file::write(&{'::source-directory'}() . "/$line", ($append && "\n") . $block, mkpath => 1, append => $append);
    "\\lstset{caption={$line" . ($append && ' (continued)') . "},name={$line}}\\begin{${name}code}\n$block \\end{${name}code}";
  };

  meta::externalize_template $name, $implementation;
}
__8438e73e45c87188c8b46d0c43eb4971
meta::meta('functor::editable', <<'__e3d2ede6edf65ffe2123584b2bd5dab7');
# An editable type. This creates a type whose default action is to open an editor
# on whichever value is mentioned. This can be changed using different flags.

sub meta::functor::editable {
  my ($typename, %options) = @_;

  meta::configure $typename, %options;
  meta::define_form $typename, sub {
    my ($name, $value) = @_;

    $options{on_bind} && &{$options{on_bind}}($name, $value);

    meta::externalize $options{prefix} . $name, "${typename}::$name", sub {
      my $attribute             = "${typename}::$name";
      my ($command, @new_value) = @_;

      return &{$options{default}}(retrieve($attribute)) if ref $options{default} eq 'CODE' and not defined $command;
      return edit($attribute) if $command eq 'edit' or $options{default} eq 'edit' and not defined $command;
      return associate($attribute, @new_value ? join(' ', @new_value) : join('', <STDIN>)) if $command eq '=' or $command eq 'import' or $options{default} eq 'import' and not defined $command;
      return retrieve($attribute)}}}
__e3d2ede6edf65ffe2123584b2bd5dab7
meta::meta('functor::tex-templates', <<'__34a5da8558897a4388fc22ed4b0c3c6b');
package tex;

# A wrapper for TeX templates. The idea is always the same, so I'm abstracting out the
# common externalization logic here.
sub template_for(&) {
  my ($implementation) = @_;
  sub {
    my %names = @_;
    for my $name (keys %names) {
      ::meta::externalize_template $name, sub {
        &$implementation($names{$name}, @_);
      };
    }
  };
}

sub id {
  map {$_ => $_} @_;
}

# Creates a one-line or multiline template based on normal TeX syntax. It's a straight
# transfer into TeX with no preprocessing.
*template = template_for {
  my ($name, $line, $block) = @_;
  $block ? "\\begin{$name}\n$block\n\\end{$name}" : "\\$name\{$line\}";
};

# Creates a labeled one-line template. This is just like normal TeX, but assumes the
# specification of a label name after a pipe character.
*labeled_template = template_for {
  my ($name, $line, undef) = @_;
  my ($real_stuff, $label) = split /\h*\|\h*/, $line;
  "\\$name\{$real_stuff\}" . ($label && "\\label{$label}");
};
__34a5da8558897a4388fc22ed4b0c3c6b
meta::meta('template::beamer', <<'__fc293f4856a8335806dee61c9692b0b2');
tex::template tex::id(qw/frame pause item block alertblock exampleblock/);

my $fframe_template = tex::template_for {
  my ($name, $line, $block) = @_;
  "\\begin{frame}[fragile]\n$block\n\\end{frame}\n";
};
&$fframe_template(tex::id('fframe'));
__fc293f4856a8335806dee61c9692b0b2
meta::meta('template::code', 'code::template $_ for qw/java cpp asm javascript html resource perl/;');
meta::meta('template::document', 'tex::template tex::id(qw/document tableofcontents maketitle title author date abstract documentclass verbatim/);');
meta::meta('template::enumeration', 'tex::template tex::id(qw/enumerate itemize description item/);');
meta::meta('template::math', <<'__2ea173a12f781eec97f4a0d3bfe80f75');
tex::template align => 'align*', nalign => 'align';
tex::template tex::id(qw/theorem proof lemma corollary conjecture definition proposition/);
__2ea173a12f781eec97f4a0d3bfe80f75
meta::meta('template::quotations', 'tex::template tex::id(qw/quotation quote/);');
meta::meta('template::sections', <<'__0bf14cbc6a0e77d9b82dd185d8d8a9a0');
tex::labeled_template(s1 => 'section', s2 => 'subsection', s3 => 'subsubsection', s4 => 'paragraph', s5 => 'subparagraph');
tex::labeled_template(sc => 'chapter', sp => 'part');
__0bf14cbc6a0e77d9b82dd185d8d8a9a0
meta::meta('type::alias', <<'__28fe15dd61f4902ed5180d8604d15d97');
meta::configure 'alias', inherit => 0;
meta::define_form 'alias', sub {
  my ($name, $value) = @_;
  meta::externalize $name, "alias::$name", sub {
    # Can't pre-tokenize because shell::tokenize doesn't exist until the library::
    # namespace has been evaluated (which will be after alias::).
    shell::run(shell::tokenize($value), shell::tokenize(@_));
  };
};
__28fe15dd61f4902ed5180d8604d15d97
meta::meta('type::bootstrap', <<'__297d03fb32df03b46ea418469fc4e49e');
# Bootstrap attributes don't get executed. The reason for this is that because
# they are serialized directly into the header of the file (and later duplicated
# as regular data attributes), they will have already been executed when the
# file is loaded.

meta::configure 'bootstrap', extension => '.pl', inherit => 1;
meta::define_form 'bootstrap', sub {};
__297d03fb32df03b46ea418469fc4e49e
meta::meta('type::cached_dependency', <<'__e9455b403cbff27bbcc41d917fef482f');
meta::configure 'cached_dependency', inherit => 0, extension => '';
meta::define_form 'cached_dependency', \&meta::bootstrap::implementation;
__e9455b403cbff27bbcc41d917fef482f
meta::meta('type::configuration', <<'__d67e10a128e6b1d958c5b9d3bbe25aa4');
meta::functor::editable 'configuration', inherit => 0, extension => '.conf', default => sub {
  # Any lines starting with #, with or without leading whitespace, are treated as comments.
  # Comments are not parsed in option text; that is, you could specify an option that contained
  # a # and the # and following text would be considered part of that option.
  my ($data) = @_;
  my @options = grep /:/o && ! /^\h*#/o && ! /^\h*$/o, split(/\v+/o, $data);
  s/^\h+//o for @options;
  my @key_values = map split(/\s*:\s*/o, $_, 2), @options;
  $key_values[$_ << 1] and $key_values[$_ << 1] =~ s/\s/_/go for 0 .. @key_values >> 1;
  $key_values[$_ << 1] and $key_values[$_ << 1] = lc $key_values[$_ << 1] for 0 .. @key_values >> 1;
  @key_values;
};
__d67e10a128e6b1d958c5b9d3bbe25aa4
meta::meta('type::data', 'meta::functor::editable \'data\', extension => \'\', inherit => 0, default => \'cat\';');
meta::meta('type::function', <<'__d93b3cc15693707dac518e3d6b1f5648');
meta::configure 'function', extension => '.pl', inherit => 1;
meta::define_form 'function', sub {
  my ($name, $value) = @_;
  meta::externalize $name, "function::$name", meta::eval_in("sub {\n$value\n}", "function::$name");
};
__d93b3cc15693707dac518e3d6b1f5648
meta::meta('type::hook', <<'__f55a3f728ddfb90204dff3fe5d86845c');
meta::configure 'hook', extension => '.pl', inherit => 0;
meta::define_form 'hook', sub {
  my ($name, $value) = @_;
  *{"hook::$name"} = meta::eval_in("sub {\n$value\n}", "hook::$name");
};
__f55a3f728ddfb90204dff3fe5d86845c
meta::meta('type::inc', <<'__c95915391b969734305f2f492d5ca8e3');
meta::configure 'inc', inherit => 1, extension => '.pl';
meta::define_form 'inc', sub {
  use File::Path 'mkpath';
  use File::Basename qw/basename dirname/;

  my ($name, $value) = @_;
  my $tmpdir   = basename($0) . '-' . $$;
  my $filename = "/tmp/$tmpdir/$name";

  push @INC, "/tmp/$tmpdir" unless grep /^\/tmp\/$tmpdir$/, @INC;

  mkpath(dirname($filename));
  unless (-e $filename) {
    open my $fh, '>', $filename;
    print $fh $value;
    close $fh;
  }
};
__c95915391b969734305f2f492d5ca8e3
meta::meta('type::internal_function', <<'__34abb44c67c7e282569e28ef6f4d62ab');
meta::configure 'internal_function', extension => '.pl', inherit => 1;
meta::define_form 'internal_function', sub {
  my ($name, $value) = @_;
  *{$name} = meta::eval_in("sub {\n$value\n}", "internal_function::$name");
};
__34abb44c67c7e282569e28ef6f4d62ab
meta::meta('type::library', <<'__b6dd78120e6d787acdb5c1629f7f1896');
meta::configure 'library', extension => '.pl', inherit => 1;
meta::define_form 'library', sub {
  my ($name, $value) = @_;
  meta::eval_in($value, "library::$name");
};
__b6dd78120e6d787acdb5c1629f7f1896
meta::meta('type::message_color', <<'__794bf137c425293738f07636bcfb5c55');
meta::configure 'message_color', extension => '', inherit => 1;
meta::define_form 'message_color', sub {
  my ($name, $value) = @_;
  terminal::color($name, $value);
};
__794bf137c425293738f07636bcfb5c55
meta::meta('type::meta', <<'__640f25635ce2365b0648962918cf9932');
# This doesn't define a new type. It customizes the existing 'meta' type
# defined in bootstrap::initialization. Note that horrible things will
# happen if you redefine it using the editable functor.

meta::configure 'meta', extension => '.pl', inherit => 1;
__640f25635ce2365b0648962918cf9932
meta::meta('type::note', 'meta::functor::editable \'note\', extension => \'.sdoc\', inherit => 0, default => \'edit\';');
meta::meta('type::parent', <<'__607e9931309b1b595424bedcee5dfa45');
meta::define_form 'parent', \&meta::bootstrap::implementation;
meta::configure 'parent', extension => '', inherit => 1;
__607e9931309b1b595424bedcee5dfa45
meta::meta('type::resource', 'meta::functor::editable \'resource\', extension => \'.cltex\', inherit => 1, default => \'edit\';');
meta::meta('type::retriever', <<'__6e847a9d205e4a5589765a3366cdd115');
meta::configure 'retriever', extension => '.pl', inherit => 1;
meta::define_form 'retriever', sub {
  my ($name, $value) = @_;
  $transient{retrievers}{$name} = meta::eval_in("sub {\n$value\n}", "retriever::$name");
};
__6e847a9d205e4a5589765a3366cdd115
meta::meta('type::section', 'meta::functor::editable \'section\', extension => \'.cltex\', inherit => 0, default => \'edit\';');
meta::meta('type::state', <<'__c1f29670be26f1df6100ffe4334e1202');
# Allows temporary or long-term storage of states. Nothing particularly insightful
# is done about compression, so storing alternative states will cause a large
# increase in size. Also, states don't contain other states -- otherwise the size
# increase would be exponential.

# States are created with the save-state function.

meta::configure 'state', inherit => 0, extension => '.pl';
meta::define_form 'state', \&meta::bootstrap::implementation;
__c1f29670be26f1df6100ffe4334e1202
meta::meta('type::template', <<'__25f4d6eafb1d3eea6d5d3d9a71a5623e');
meta::configure 'template', extension => '.pl', inherit => 1;
meta::define_form 'template', sub {
  my ($name, $value) = @_;
  meta::externalize "template::$name", "template::$name", meta::eval_in("sub {\n$value\n}", "template::$name");
};
__25f4d6eafb1d3eea6d5d3d9a71a5623e
meta::meta('type::vim_highlighter', 'meta::functor::editable \'vim_highlighter\', extension => \'.vim\', inherit => 1, default => \'edit\';');
meta::bootstrap('html', <<'__aa347c4339e71e7acc9ea4fc3d593347');
<html>
  <head>
  <meta http-equiv='content-type' content='text/html; charset=UTF-8' />
  <link rel='stylesheet' href='http://spencertipping.com/perl-objects/web/style.css'/>

  <script src='http://ajax.googleapis.com/ajax/libs/jquery/1.5.2/jquery.min.js'></script>
  <script src='http://spencertipping.com/caterwaul/caterwaul.all.min.js'></script>
  <script src='http://spencertipping.com/montenegro/montenegro.client.js'></script>
  <script src='http://spencertipping.com/perl-objects/web/interface.js'></script>
  </head>
  <body></body>
</html>

__aa347c4339e71e7acc9ea4fc3d593347
meta::bootstrap('initialization', <<'__8774229a1a0ce7fd056d81ba0b077f79');
#!/usr/bin/perl
# Run perldoc on this file for documentation.

$|++;

my %data;
my %transient;
my %externalized_functions;
my %datatypes;

my %locations;          # Maps eval-numbers to attribute names

sub meta::define_form {
  my ($namespace, $delegate) = @_;
  $datatypes{$namespace} = $delegate;
  *{"meta::${namespace}::implementation"} = $delegate;
  *{"meta::$namespace"} = sub {
    my ($name, $value, %options) = @_;
    chomp $value;
    $data{"${namespace}::$name"} = $value unless $options{no_binding};
    $delegate->($name, $value) unless $options{no_delegate}}}

sub meta::eval_in {
  my ($what, $where) = @_;

  # Obtain next eval-number and alias it to the designated location
  @locations{eval('__FILE__') =~ /\(eval (\d+)\)/} = ($where);

  my $result = eval $what;
  $@ =~ s/\(eval \d+\)/$where/ if $@;
  warn $@ if $@;
  $result}

meta::define_form 'meta', sub {
  my ($name, $value) = @_;
  meta::eval_in($value, "meta::$name")};

__8774229a1a0ce7fd056d81ba0b077f79
meta::bootstrap('perldoc', <<'__c63395cbc6f7160b603befbb2d9b6700');
=head1 Self-modifying Perl script

=head2 Original implementation by Spencer Tipping L<http://spencertipping.com>

The prototype for this script is licensed under the terms of the MIT source code license.
However, this script in particular may be under different licensing terms. To find out how
this script is licensed, please contact whoever sent it to you. Alternatively, you may
run it with the 'license' argument if they have specified a license that way.

You should not edit this file directly. For information about how it was constructed, go
to L<http://spencertipping.com/writing-self-modifying-perl>. For quick usage guidelines,
run this script with the 'usage' argument.

=cut

__c63395cbc6f7160b603befbb2d9b6700
meta::data('author', 'Spencer Tipping');
meta::data('default-action', 'shell');
meta::data('license', <<'__3c6177256de0fddb721f534c3ad8c0ee');
MIT License
Copyright (c) 2010 Spencer Tipping

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
__3c6177256de0fddb721f534c3ad8c0ee
meta::data('output-dir', '/tmp');
meta::data('pdf-output-file', '/tmp/writing-self-modifying-perl.9Yr3/document.pdf');
meta::data('pdf-reader', '/usr/bin/evince');
meta::data('pdftex-command', 'pdflatex -output-directory=__TEMPORARY_DIRECTORY__ __INPUT_FILE__');
meta::data('permanent-identity', '2572d38bedc92761b662fe6b546a01cf');
meta::data('source-directory', '.');
meta::data('table-of-contents', '1');
meta::data('tex-command', 'latex -output-directory=__TEMPORARY_DIRECTORY__ __INPUT_FILE__');
meta::data('watching', '0');
meta::function('alias', <<'__28744564997657da45ab16cd5b441104');
my ($name, @stuff) = @_;
return ls('-a', '^alias::') unless defined $name;
@stuff ? around_hook('alias', @_, sub {associate("alias::$name", join ' ', @stuff)}) : retrieve("alias::$name") || "Undefined alias $name";
__28744564997657da45ab16cd5b441104
meta::function('cat', 'join "\\n", retrieve(@_);');
meta::function('cc', <<'__c4d52b1d8f52a480f07b81b93c3aac7b');
# Stashes a quick one-line continuation. (Used to remind me what I was doing.)
@_ ? associate('data::current-continuation', hook('set-cc', join(' ', @_))) : retrieve('data::current-continuation');
__c4d52b1d8f52a480f07b81b93c3aac7b
meta::function('child', <<'__f69646398c3123d3d939a7f2b3156606');
around_hook('child', @_, sub {
  my ($child_name) = @_;
  clone($child_name);
  enable();
  qx($child_name update-from $0 -n);
  disable()});
__f69646398c3123d3d939a7f2b3156606
meta::function('clean', <<'__1269c1a312062a1598dcde16eb6134e2');
my $output_directory = &{'pdf-output-file'}();
$output_directory =~ s+/.*++g;
unlink <$output_directory/*>;
rmdir $output_directory;
__1269c1a312062a1598dcde16eb6134e2
meta::function('clone', <<'__54e00ff2103e54423d4c9febb97ce063');
for (grep length, @_) {
  around_hook('clone', $_, sub {
    hypothetically(sub {
      rm('data::permanent-identity');
      file::write($_, serialize(), noclobber => 1);
      chmod(0700, $_)})})}
__54e00ff2103e54423d4c9febb97ce063
meta::function('compile', <<'__59d02438dafea67f3f12c2b74f4a8bfb');
my $tex_command         = &{'tex-command'}();
my $pdftex_command      = &{'pdftex-command'}();
my $filename            = 'document';

my $contents            = tex();
my $output_directory    = &{'output-dir'}();
chomp $output_directory;

my $temporary_directory = temporary_name();
$temporary_directory =~ s+^.*/++;
$temporary_directory = "$output_directory/$temporary_directory";

$tex_command    =~ s/__TEMPORARY_DIRECTORY__/$temporary_directory/g;
$tex_command    =~ s+__INPUT_FILE__+$temporary_directory/$filename.tex+g;

$pdftex_command =~ s/__TEMPORARY_DIRECTORY__/$temporary_directory/g;
$pdftex_command =~ s+__INPUT_FILE__+$temporary_directory/$filename.tex+g;

mkdir $temporary_directory;
file::write("$temporary_directory/$filename.tex", $contents);

my $result = &{'table-of-contents'}() ? system($tex_command) || system($tex_command) || system($pdftex_command) : system($pdftex_command);

associate('data::pdf-output-file', "$temporary_directory/$filename.pdf", execute => 1);
$result;
__59d02438dafea67f3f12c2b74f4a8bfb
meta::function('cp', <<'__e5fee448a74ecbf4ae215e6b43dfc048');
my $from = shift @_;
my $value = retrieve($from);
associate($_, $value) for @_;
__e5fee448a74ecbf4ae215e6b43dfc048
meta::function('create', <<'__090c342a2dc304b39c643d53350474a0');
my ($name, $value) = @_;
around_hook('create', $name, $value, sub {
  return edit($name) if exists $data{$name};
  associate($name, defined $value ? $value : '');
  edit($name) unless defined $value});
__090c342a2dc304b39c643d53350474a0
meta::function('current-state', <<'__d83ae43551c0f58d1d0ce576402a315a');
my @valid_keys   = grep ! /^state::/, sort keys %data;
my @ordered_keys = (grep(/^meta::/, @valid_keys), grep(! /^meta::/, @valid_keys));
join "\n", map serialize_single($_), @ordered_keys;
__d83ae43551c0f58d1d0ce576402a315a
meta::function('disable', 'hook(\'disable\', chmod_self(sub {$_[0] & 0666}));');
meta::function('dupdate', <<'__1c0273217c5b9f2756bb14a4a00aa7e2');
# Update the repository based on the dependencies it lists.
use LWP::Simple ();
rm(grep /^cached_dependency::/, keys %data);
my %dependencies = dependencies();

for (keys %dependencies) {
  terminal::info("Retrieving $dependencies{$_} as $_");
  associate("cached_dependency::$_", LWP::Simple::get($dependencies{$_}))}
__1c0273217c5b9f2756bb14a4a00aa7e2
meta::function('edit', <<'__fd926994eabc382472a1d11b61a1dc2e');
my ($name, %options) = @_;
my $extension = extension_for($name);

die "Attribute $name does not exist" unless exists $data{$name};
die "$name is inherited; use 'edit $name -f' to edit anyway" unless is($name, '-u') || exists $options{'-f'};

around_hook('edit', @_, sub {
  associate($name, invoke_editor_on($data{$name} || "# Attribute $name", %options, attribute => $name, extension => $extension),
            execute => $name !~ /^bootstrap::/)});
save() unless $data{'data::edit::no-save'};
'';
__fd926994eabc382472a1d11b61a1dc2e
meta::function('enable', 'hook(\'enable\', chmod_self(sub {$_[0] | $_[0] >> 2}));');
meta::function('export', <<'__388e0cc60507443cb1c0cc3e2658cfef');
# Exports data into a text file.
#   export attr1 attr2 attr3 ... file.txt
my $name = pop @_;
@_ or die 'Expected filename';
file::write($name, join "\n", retrieve(@_));
__388e0cc60507443cb1c0cc3e2658cfef
meta::function('extern', '&{$_[0]}(retrieve(@_[1 .. $#_]));');
meta::function('grep', <<'__f2f28b81f4bcf4cf9fbe9e27bc9447b0');
# Looks through attributes for a pattern. Usage is grep pattern [options], where
# [options] is the format as provided to select_keys.

my ($pattern, @args)     = @_;
my ($options, @criteria) = separate_options(@args);
my @attributes           = select_keys(%$options, '--criteria' => join('|', @criteria));

$pattern = qr/$pattern/;

my @m_attributes, @m_line_numbers, @m_lines;

for my $k (@attributes) {
  next unless length $k;
  my @lines = split /\n/, retrieve($k);
  for (0 .. $#lines) {
    next unless $lines[$_] =~ $pattern;
    push @m_attributes,   $k;
    push @m_line_numbers, $_ + 1;
    push @m_lines,        $lines[$_] // ''}} 

if ($$options{'-c'}) {
  s/($pattern)/\033[1;31m\1\033[0;0m/g for @m_lines;
  s/^/\033[1;34m/o for @m_attributes;
  s/^/\033[1;32m/o && s/$/\033[0;0m/o for @m_line_numbers}

table_display([@m_attributes], [@m_line_numbers], [@m_lines]);
__f2f28b81f4bcf4cf9fbe9e27bc9447b0
meta::function('hash', 'fast_hash(@_);');
meta::function('hook', <<'__d74d8e2b611342af6a0897e0bd62e6e6');
my ($hook, @args) = @_;
$transient{active_hooks}{$hook} = 1;
dangerous('', sub {&$_(@args)}) for grep /^hook::${hook}::/, sort keys %data;
@args;
__d74d8e2b611342af6a0897e0bd62e6e6
meta::function('hooks', 'join "\\n", sort keys %{$transient{active_hooks}};');
meta::function('identity', 'retrieve(\'data::permanent-identity\') || associate(\'data::permanent-identity\', fast_hash(rand() . name() . serialize()));');
meta::function('import', <<'__ac86cbe9c9fb12fc8cef2cc88e80c01e');
my $name = pop @_;
associate($name, @_ ? join('', map(file::read($_), @_)) : join('', <STDIN>)); 
__ac86cbe9c9fb12fc8cef2cc88e80c01e
meta::function('initial-state', '$transient{initial};');
meta::function('is', <<'__5d4fddb72b0715694b83aa0c925a8d04');
my ($attribute, @criteria) = @_;
my ($options, @stuff) = separate_options(@criteria);
grep $_ eq $attribute, select_keys(%$options);
__5d4fddb72b0715694b83aa0c925a8d04
meta::function('load-state', <<'__ea18db867bd62a294e067f60e6975dcf');
around_hook('load-state', @_, sub {
  my ($state_name) = @_;
  my $state = retrieve("state::$state_name");

  terminal::state('saving current state into _...');
  &{'save-state'}('_');

  delete $data{$_} for grep ! /^state::/, keys %data;
  %externalized_functions = ();

  terminal::state("restoring state $state_name...");
  meta::eval_in($state, "state::$state_name");
  terminal::error(hook('load-state-failed', $@)) if $@;
  reload();
  verify()});
__ea18db867bd62a294e067f60e6975dcf
meta::function('lock', 'hook(\'lock\', chmod_self(sub {$_[0] & 0555}));');
meta::function('ls', <<'__acdc3ca5777ab9c7c430d493a7555998');
my ($options, @criteria) = separate_options(@_);
my ($all, $shadows, $dereference, $sizes, $flags) = @$options{qw(-a -s -d -z -l)};
$all   ||= $dereference;
$sizes ||= $flags;

return table_display([grep ! exists $data{$externalized_functions{$_}}, sort keys %externalized_functions]) if $shadows;

my $criteria    = join('|', @criteria);
my @definitions = select_keys('--criteria' => $criteria, %$options);

my %inverses  = map {$externalized_functions{$_} => $_} keys %externalized_functions;
my @externals = map $inverses{$_}, grep length, @definitions;
my @internals = grep length $inverses{$_}, @definitions;
my @sizes     = map sprintf('%6d %6d', length(serialize_single($_)), length(retrieve($_))), @{$all ? \@definitions : \@internals} if $sizes;

my %flag_hashes = map {$_ => {map {$_ => 1} select_keys("-$_" => 1)}} qw(m u i) if $flags;
my @flags       = map {my $k = $_; join '', map($flag_hashes{$_}{$k} ? $_ : '-', sort keys %flag_hashes)} @definitions if $flags;

join "\n", map strip($_), split /\n/, table_display($all ? [@definitions] : [grep length, @externals], $dereference ? ([@externals]) : (),
                                                    $sizes ? ([@sizes]) : (), $flags ? ([@flags]) : ());
__acdc3ca5777ab9c7c430d493a7555998
meta::function('make', <<'__9a3d7e3c7e0017f4c9b239f3858aaf03');
compile() || view();
clean();
__9a3d7e3c7e0017f4c9b239f3858aaf03
meta::function('mv', <<'__52e95180e3c7019116bd798e0da0fdda');
my ($from, $to) = @_;
die "'$from' does not exist" unless exists $data{$from};
associate($to, retrieve($from));
rm($from);
__52e95180e3c7019116bd798e0da0fdda
meta::function('name', <<'__6848cbc257e4b6d7441b25acb04e23c9');
my $name = $0;
$name =~ s/^.*\///;
$name;
__6848cbc257e4b6d7441b25acb04e23c9
meta::function('note', <<'__bcbfeac6dd2112f47296265444570a6e');
# Creates a note with a given name, useful for jotting things down.
create("note::$_[0]");
__bcbfeac6dd2112f47296265444570a6e
meta::function('notes', 'ls(\'-a\', \'^note::\');');
meta::function('parents', 'join "\\n", grep s/^parent:://o, sort keys %data;');
meta::function('perl', <<'__986a274c013b77fe08d29726ce3799fe');
my $result = eval(join ' ', @_);
$@ ? terminal::error($@) : $result;
__986a274c013b77fe08d29726ce3799fe
meta::function('preprocess', <<'__66e539d29e9afa903569efad0eb7c886');
# Implements a simple preprocessing language.
# Syntax follows two forms. One is the 'line form', which gives you a way to specify arguments inline
# but not spanning multiple lines. The other is 'block form', which gives you access to both one-line
# arguments and a block of lines. The line parameters are passed in verbatim, and the block is
# indentation-adjusted and then passed in as a second parameter. (Indentation is adjusted to align
# with the name of the command.)
#
# Here are the forms:
#
# - line arguments to function
#
# - block line arguments << eof
#   block contents
#   block contents
#   ...
# - eof

my ($string, %options) = @_;
my $expansions         = 0;
my $old_string         = '';
my $limit              = $options{expansion_limit} || 100;
my @pieces             = ();

sub adjust_spaces {
  my ($spaces, $string) = @_;
  $string =~ s/^$spaces  //mg;
  chomp $string;
  $string;
}

while ($old_string ne $string and $expansions++ < $limit) {
  $old_string = $string;

  while ((my @pieces = split  /(^(\h*)-\h \S+ \h* \V* <<\h*(\w+)$ \n .*?  ^\2-\h\3$)/xms, $string) > 1 and $expansions++ < $limit) {
    $pieces[1 + ($_ << 2)] =~ /^ (\h*)-\h(\S+)\h*(\V*)<<\h*(\w+)$ \n(.*?) ^\1-\h\4 $/xms && $externalized_functions{"template::$2"} and
      $pieces[1 + ($_ << 2)] = &{"template::$2"}($3, adjust_spaces($1, $5))
      for 0 .. $#pieces / 4;

    @pieces[2 + ($_ << 2), 3 + ($_ << 2)] = '' for 0 .. $#pieces / 4;
    $string = join '', @pieces;
  }

  if ((my @pieces = split     /^(\h*-\h \S+ \h* .*)$/xom, $string) > 1) {
    $pieces[1 + ($_ << 1)] =~ /^ \h*-\h(\S+)\h*(.*)$/xom && $externalized_functions{"template::$1"} and
      $pieces[1 + ($_ << 1)] = &{"template::$1"}($2)
      for 0 .. $#pieces >> 1;

    $string = join '', @pieces;
  }
}

$string;
__66e539d29e9afa903569efad0eb7c886
meta::function('reload', 'around_hook(\'reload\', sub {execute($_) for grep ! /^bootstrap::/, keys %data});');
meta::function('render', <<'__6170d9084f7c3e10efdfb523230072dd');
use File::Copy 'copy';
compile();

my $pdf       = &{'pdf-output-file'}();
my $tex       = $pdf;
my $directory = &{'source-directory'}();
my $name      = name();

$tex =~ s/\.pdf$/.tex/;
copy($pdf, "$directory/$name.pdf") or die "Copy failed: $!";
copy($tex, "$directory/$name.tex") or die "Copy failed: $!";
__6170d9084f7c3e10efdfb523230072dd
meta::function('rm', <<'__7cecfb1691a7bf86741f00058bcc54ca');
around_hook('rm', @_, sub {
  exists $data{$_} or terminal::warning("$_ does not exist") for @_;
  delete @data{@_}});
__7cecfb1691a7bf86741f00058bcc54ca
meta::function('save', 'around_hook(\'save\', sub {dangerous(\'\', sub {file::write($0, serialize()); $transient{initial} = state()}) if verify()});');
meta::function('save-state', <<'__863e4d9fa75ca198ef7a755248d1002a');
# Creates a named copy of the current state and stores it.
my ($state_name) = @_;
around_hook('save-state', $state_name, sub {
  associate("state::$state_name", &{'current-state'}(), execute => 1)});
__863e4d9fa75ca198ef7a755248d1002a
meta::function('serialize', <<'__5148e8ca46eeb3e297f76d098e496bcf');
my ($options, @criteria) = separate_options(@_);
my $partial     = $$options{'-p'};
my $criteria    = join '|', @criteria;
my @attributes  = map serialize_single($_), select_keys(%$options, '-m' => 1, '--criteria' => $criteria), select_keys(%$options, '-M' => 1, '--criteria' => $criteria);
my @final_array = @{$partial ? \@attributes : [retrieve('bootstrap::initialization'), @attributes, 'internal::main();', '', '__END__']};
join "\n", @final_array;
__5148e8ca46eeb3e297f76d098e496bcf
meta::function('serialize_single', <<'__ef0f63556d22816ed102d3bbe2172b28');
# Serializes a single attribute and optimizes for content.

my $name          = $_[0] || $_;
my $contents      = $data{$name};
my $meta_function = 'meta::' . namespace($name);
my $invocation    = attribute($name);
my $escaped       = $contents;
$escaped =~ s/\\/\\\\/go;
$escaped =~ s/'/\\'/go;

return "$meta_function('$invocation', '$escaped');" unless $escaped =~ /\v/;

my $delimiter = '__' . fast_hash($contents);
return "$meta_function('$invocation', <<'$delimiter');\n$contents\n$delimiter";
__ef0f63556d22816ed102d3bbe2172b28
meta::function('sh', 'system(@_);');
meta::function('shell', 'shell::repl();');
meta::function('size', 'length(serialize());');
meta::function('snapshot', <<'__d3d84a364524eeb8ee90623f545187e8');
my ($name) = @_;
file::write(my $finalname = temporary_name($name), serialize(), noclobber => 1);
chmod 0700, $finalname;
hook('snapshot', $finalname);
__d3d84a364524eeb8ee90623f545187e8
meta::function('state', <<'__119111f84c3e32a5536838ac84bc6f10');
my @keys = sort keys %data;
my $hash = fast_hash(fast_hash(scalar @keys) . join '|', @keys);
$hash = fast_hash("$data{$_}|$hash") for @keys;
$hash;
__119111f84c3e32a5536838ac84bc6f10
meta::function('tex', <<'__5bb8bf491e1b442858096acf711135f9');
my ($document) = @_;
$document ||= 'main';
preprocess(retrieve("section::$document"));
__5bb8bf491e1b442858096acf711135f9
meta::function('touch', 'associate($_, \'\') for @_;');
meta::function('unlock', 'hook(\'unlock\', chmod_self(sub {$_[0] | 0200}));');
meta::function('update', '&{\'update-from\'}(@_, grep s/^parent:://o, sort keys %data);');
meta::function('update-from', <<'__4872d8da1fee53aace2c4f422841c0ba');
# Upgrade all attributes that aren't customized. Customization is defined when the data type is created,
# and we determine it here by checking for $transient{inherit}{$type}.

# Note that this assumes you trust the remote script. If you don't, then you shouldn't update from it.

around_hook('before-update-from-invocation', separate_options(@_), sub {
  my ($options, @targets) = @_;

  @targets or return;
  my $save_state = ! ($$options{'-n'} || $$options{'--no-save'});
  my $no_parents =    $$options{'-P'} || $$options{'--no-parent'} || $$options{'--no-parents'};
  my $force      =    $$options{'-f'} || $$options{'--force'};

  &{'save-state'}('before-update') if $save_state;

  for my $target (@targets) {
    around_hook('update-from', $target, sub {
    dangerous("updating from $target", sub {
      my $attributes = join '', qx($target ls -aiu);
      die "skipping unreachable $target" unless $attributes;

      rm(split /\n/, retrieve("parent::$target")) if $data{"parent::$target"};
      associate("parent::$target", $attributes) unless $no_parents;

      dangerous('', sub {eval qx($target serialize -ipmu)});
      dangerous('', sub {eval qx($target serialize -ipMu)});
      reload()})})}

  if (verify()) {hook('update-from-succeeded', $options, @targets);
                 terminal::info("Successfully updated. Run 'load-state before-update' to undo this change.") if $save_state}
  elsif ($force) {hook('update-from-failed', $options, @targets);
                  terminal::warning('Failed to verify: at this point your object will not save properly, though backup copies will be created.',
                                    'Run "load-state before-update" to undo the update and return to a working state.') if $save_state}
  else {hook('update-from-failed', $options, @targets);
        terminal::error('Verification failed after the upgrade was complete.');
        terminal::info("$0 has been reverted to its pre-upgrade state.", "If you want to upgrade and keep the failure state, then run 'update-from $target --force'.") if $save_state;
        return &{'load-state'}('before-update') if $save_state}});
__4872d8da1fee53aace2c4f422841c0ba
meta::function('usage', '"Usage: $0 action [arguments]\\nUnique actions (run \'$0 ls\' to see all actions):" . ls(\'-u\');');
meta::function('verify', <<'__d31b85fffd464ddf516d2afeb63dcbde');
file::write(my $other = $transient{temporary_filename} = temporary_name(), my $serialized_data = serialize());
chomp(my $observed = join '', qx|perl '$other' state|);

unlink $other if my $result = $observed eq (my $state = state());
terminal::error("Verification failed; expected $state but got $observed from $other") unless $result;
hook('after-verify', $result, observed => $observed, expected => $state);
$result;
__d31b85fffd464ddf516d2afeb63dcbde
meta::function('view', <<'__72064117780244bd9dd38659573b9f2c');
my $pdf_reader      = &{'pdf-reader'}();
my $pdf_output_file = &{'pdf-output-file'}();
chomp $pdf_reader;
system("$pdf_reader '$pdf_output_file'");
__72064117780244bd9dd38659573b9f2c
meta::function('vim', <<'__bd231af998c353790253bc6660be0b90');
# Installs VIM highlighters.
file::write("$ENV{'HOME'}/.vim/syntax/$_.vim", retrieve("vim_highlighter::$_")) for grep s/^vim_highlighter:://o, keys %data;
__bd231af998c353790253bc6660be0b90
meta::internal_function('around_hook', <<'__e1cd17b80d4e8165df9c94facd9f239b');
# around_hook('hookname', @args, sub {
#   stuff;
# });

# Invokes 'before-hookname' on @args before the sub runs, invokes the
# sub on @args, then invokes 'after-hookname' on @args afterwards.
# The after-hook is not invoked if the sub calls 'die' or otherwise
# unwinds the stack.

my $hook = shift @_;
my $f    = pop @_;

hook("before-$hook", @_);
my $result = &$f(@_);
hook("after-$hook", @_);
$result;
__e1cd17b80d4e8165df9c94facd9f239b
meta::internal_function('associate', <<'__fc4f785bcf3ffe3225a73a1fdd314703');
my ($name, $value, %options) = @_;
die "Namespace does not exist" unless exists $datatypes{namespace($name)};
$data{$name} = $value;
execute($name) if $options{'execute'};
$value;
__fc4f785bcf3ffe3225a73a1fdd314703
meta::internal_function('attribute', <<'__62efb9f22157835940af1d5feae98d98');
my ($name) = @_;
$name =~ s/^[^:]*:://;
$name;
__62efb9f22157835940af1d5feae98d98
meta::internal_function('chmod_self', <<'__b13487447c65f2dc790bd6b21dde89dd');
my ($mode_function)      = @_;
my (undef, undef, $mode) = stat $0;
chmod &$mode_function($mode), $0;
__b13487447c65f2dc790bd6b21dde89dd
meta::internal_function('dangerous', <<'__4b8343178d6d4d1b760d61b1cfda008c');
# Wraps a computation that may produce an error.
my ($message, $computation) = @_;
terminal::info($message) if $message;
my @result = eval {&$computation()};
terminal::warning(translate_backtrace($@)), return undef if $@;
wantarray ? @result : $result[0];
__4b8343178d6d4d1b760d61b1cfda008c
meta::internal_function('debug_trace', <<'__77644ab45a770a6e172680f659911507');
terminal::debug(join ', ', @_);
wantarray ? @_ : $_[0];
__77644ab45a770a6e172680f659911507
meta::internal_function('execute', <<'__4b4efc33bc6767a7aade7f427eedf83f');
my ($name, %options) = @_;
my $namespace = namespace($name);
eval {&{"meta::$namespace"}(attribute($name), retrieve($name))};
warn $@ if $@ && $options{'carp'};
__4b4efc33bc6767a7aade7f427eedf83f
meta::internal_function('exported', <<'__27414e8f2ceeaef3555b9726e690eb0f');
# Allocates a temporary file containing the concatenation of attributes you specify,
# and returns the filename. The filename will be safe for deletion anytime.
my $filename = temporary_name();
file::write($filename, cat(@_));
$filename;
__27414e8f2ceeaef3555b9726e690eb0f
meta::internal_function('extension_for', <<'__65e48f50f20bc04aa561720b03bf494c');
my $extension = $transient{extension}{namespace($_[0])};
$extension = &$extension($_[0]) if ref $extension eq 'CODE';
$extension || '';
__65e48f50f20bc04aa561720b03bf494c
meta::internal_function('fast_hash', <<'__ac70f469e697725cfb87629833434ab1');
my ($data)     = @_;
my $piece_size = length($data) >> 3;

my @pieces     = (substr($data, $piece_size * 8) . length($data), map(substr($data, $piece_size * $_, $piece_size), 0 .. 7));
my @hashes     = (fnv_hash($pieces[0]));

push @hashes, fnv_hash($pieces[$_ + 1] . $hashes[$_]) for 0 .. 7;

$hashes[$_] ^= $hashes[$_ + 4] >> 16 | ($hashes[$_ + 4] & 0xffff) << 16 for 0 .. 3;
$hashes[0]  ^= $hashes[8];

sprintf '%08x' x 4, @hashes[0 .. 3];
__ac70f469e697725cfb87629833434ab1
meta::internal_function('file::read', <<'__186bbcef8f6f0dd8b72ba0fdeb1de040');
my $name = shift;
open my($handle), "<", $name;
my $result = join "", <$handle>;
close $handle;
$result;
__186bbcef8f6f0dd8b72ba0fdeb1de040
meta::internal_function('file::write', <<'__eb7b1efebe0db73378b0cce46681788d');
use File::Path     'mkpath';
use File::Basename 'dirname';

my ($name, $contents, %options) = @_;
die "Choosing not to overwrite file $name" if $options{noclobber} and -f $name;
mkpath(dirname($name)) if $options{mkpath};

open my($handle), $options{append} ? '>>' : '>', $name or die "Can't open $name for writing";
print $handle $contents;
close $handle;
__eb7b1efebe0db73378b0cce46681788d
meta::internal_function('fnv_hash', <<'__8d001a3a7988631bab21a41cee559758');
# A rough approximation to the Fowler-No Voll hash. It's been 32-bit vectorized
# for efficiency, which may compromise its effectiveness for short strings.

my ($data) = @_;

my ($fnv_prime, $fnv_offset) = (16777619, 2166136261);
my $hash                     = $fnv_offset;
my $modulus                  = 2 ** 32;

$hash = ($hash ^ ($_ & 0xffff) ^ ($_ >> 16)) * $fnv_prime % $modulus for unpack 'L*', $data . substr($data, -4) x 8;
$hash;
__8d001a3a7988631bab21a41cee559758
meta::internal_function('hypothetically', <<'__33ee2e1595d3877bd1d9accaa72305c8');
# Applies a temporary state and returns a serialized representation.
# The original state is restored after this, regardless of whether the
# temporary state was successful.

my %data_backup   = %data;
my ($side_effect) = @_;
my $return_value  = eval {&$side_effect()};
%data = %data_backup;

die $@ if $@;
$return_value;
__33ee2e1595d3877bd1d9accaa72305c8
meta::internal_function('internal::main', <<'__435a9e83ac803960745d9aa5aac6c75f');
disable();

$SIG{'INT'} = sub {snapshot(); exit 1};

$transient{initial}      = state();
chomp(my $default_action = retrieve('data::default-action'));

my $function_name = shift(@ARGV) || $default_action || 'usage';
terminal::warning("unknown action: '$function_name'") and $function_name = 'usage' unless $externalized_functions{$function_name};

around_hook('main-function', $function_name, @ARGV, sub {
  dangerous('', sub {
    chomp(my $result = &$function_name(@ARGV));
    print "$result\n" if $result})});

save() unless state() eq $transient{initial};

END {
  enable();
}
__435a9e83ac803960745d9aa5aac6c75f
meta::internal_function('invoke_editor_on', <<'__1448132d5294a4b8390b4a684d8a78f9');
my ($data, %options) = @_;
my $editor    = $options{editor} || $ENV{VISUAL} || $ENV{EDITOR} || die 'Either the $VISUAL or $EDITOR environment variable should be set to a valid editor';
my $options   = $options{options} || $ENV{VISUAL_OPTS} || $ENV{EDITOR_OPTS} || '';
my $attribute = $options{attribute};
$attribute =~ s/\//-/g;
my $filename  = temporary_name() . "-$attribute$options{extension}";

file::write($filename, $data);
system("$editor $options '$filename'");

my $result = file::read($filename);
unlink $filename;
$result;
__1448132d5294a4b8390b4a684d8a78f9
meta::internal_function('is_locked', '!((stat($0))[2] & 0222);');
meta::internal_function('main', <<'__cb63fed16dd9ee83dcbd15aa72643d74');
$SIG{'INT'} = sub {
  snapshot();
  exit 1;
};

my $initial_state        = state();
chomp(my $default_action = retrieve('data::default-action'));

my $function_name = shift(@ARGV) || $default_action || 'usage';
terminal::message('warning', "Unknown action: '$function_name'") and $function_name = 'usage' unless $externalized_functions{$function_name};

chomp(my $result = &$function_name(@ARGV));
print "$result\n" if $result;

save() unless $initial_state eq state();
__cb63fed16dd9ee83dcbd15aa72643d74
meta::internal_function('namespace', <<'__93213d60cafb9627e0736b48cd1f0760');
my ($name) = @_;
$name =~ s/::.*$//;
$name;
__93213d60cafb9627e0736b48cd1f0760
meta::internal_function('retrieve', <<'__0b6f4342009684fdfa259f45ac75ae37');
my @results = map defined $data{$_} ? $data{$_} : retrieve_with_hooks($_), @_;
wantarray ? @results : $results[0];
__0b6f4342009684fdfa259f45ac75ae37
meta::internal_function('retrieve_with_hooks', <<'__5186a0343624789d08d1cc2084550f3d');
# Uses the hooks defined in $transient{retrievers}, and returns undef if none work.
my ($attribute) = @_;
my $result      = undef;

defined($result = &$_($attribute)) and return $result for map $transient{retrievers}{$_}, sort keys %{$transient{retrievers}};
return undef;
__5186a0343624789d08d1cc2084550f3d
meta::internal_function('select_keys', <<'__8ee1d5fa37927c66d9eec4d0d8269493');
my %options   = @_;
my %inherited = map {$_ => 1} split /\n/o, join "\n", retrieve(grep /^parent::/o, sort keys %data) if $options{'-u'} or $options{'-U'};
my $criteria  = $options{'--criteria'} || $options{'--namespace'} && "^$options{'--namespace'}::" || '.';

grep /$criteria/ && (! $options{'-u'} || ! $inherited{$_}) && (! $options{'-U'} || $inherited{$_}) &&
                    (! $options{'-I'} || ! $transient{inherit}{namespace($_)}) && (! $options{'-i'} || $transient{inherit}{namespace($_)}) &&
                    (! $options{'-S'} || ! /^state::/o) && (! $options{'-M'} || ! /^meta::/o) && (! $options{'-m'} || /^meta::/o), sort keys %data;
__8ee1d5fa37927c66d9eec4d0d8269493
meta::internal_function('separate_options', <<'__d47e8ee23fe55e27bb523c9fcb2f5ca1');
# Things with one dash are short-form options, two dashes are long-form.
# Characters after short-form are combined; so -auv4 becomes -a -u -v -4.
# Also finds equivalences; so --foo=bar separates into $$options{'--foo'} eq 'bar'.
# Stops processing at the -- option, and removes it. Everything after that
# is considered to be an 'other' argument.

# The only form not supported by this function is the short-form with argument.
# To pass keyed arguments, you need to use long-form options.

my @parseable;
push @parseable, shift @_ until ! @_ or $_[0] eq '--';

my @singles = grep /^-[^-]/, @parseable;
my @longs   = grep /^--/,    @parseable;
my @others  = grep ! /^-/,   @parseable;

my @singles = map /-(.{2,})/ ? map("-$_", split(//, $1)) : $_, @singles;

my %options;
  $options{$1} = $2 for grep /^([^=]+)=(.*)$/, @longs;
++$options{$_}      for grep ! /=/, @singles, @longs;

({%options}, @others, @_);
__d47e8ee23fe55e27bb523c9fcb2f5ca1
meta::internal_function('strip', 'wantarray ? map {s/^\\s*|\\s*$//g; $_} @_ : $_[0] =~ /^\\s*(.*?)\\s*$/ && $1;');
meta::internal_function('table_display', <<'__8a6897e093f36bf05477a3889b84a61d');
# Displays an array of arrays as a table; that is, with alignment. Arrays are
# expected to be in column-major order.

sub maximum_length_in {
  my $maximum = 0;
  length > $maximum and $maximum = length for @_;
  $maximum;
}

my @arrays    = @_;
my @lengths   = map maximum_length_in(@$_), @arrays;
my @row_major = map {my $i = $_; [map $$_[$i], @arrays]} 0 .. $#{$arrays[0]};
my $format    = join '  ', map "%-${_}s", @lengths;

join "\n", map strip(sprintf($format, @$_)), @row_major;
__8a6897e093f36bf05477a3889b84a61d
meta::internal_function('temporary_name', <<'__0fb1402061581b69822f913631b4a9d9');
use File::Temp 'tempfile';
my (undef, $temporary_filename) = tempfile("$0." . 'X' x 4, OPEN => 0);
$temporary_filename;
__0fb1402061581b69822f913631b4a9d9
meta::internal_function('translate_backtrace', <<'__06fad3d85833a6484e426401b95e0206');
my ($trace) = @_;
$trace =~ s/\(eval (\d+)\)/$locations{$1 - 1}/g;
$trace;
__06fad3d85833a6484e426401b95e0206
meta::internal_function('with_exported', <<'__fc4f32c46d95c6deed0414364d1c7410');
# Like exported(), but removes the file after running some function.
# Usage is with_exported(@files, sub {...});
my $f      = pop @_;
my $name   = exported(@_);
my $result = eval {&$f($name)};
terminal::warning("$@ when running with_exported()") if $@;
unlink $name;
$result;
__fc4f32c46d95c6deed0414364d1c7410
meta::library('shell', <<'__7df727b3be0d8579da3fee5144041f75');
# Functions for shell parsing and execution.
package shell;
use Term::ReadLine;

sub tokenize {grep length, split /\s+|("[^"\\]*(?:\\.)?")/o, join ' ', @_};

sub parse {
  my ($fn, @args) = @_;
  s/^"(.*)"$/\1/o, s/\\\\"/"/go for @args;
  {function => $fn, args => [@args]}}

sub execute {
  my %command = %{$_[0]};
  die "undefined command: $command{function}" unless exists $externalized_functions{$command{function}};
  &{"::$command{function}"}(@{$command{args}})}

sub run {execute(parse(tokenize(@_)))}

sub prompt {
  my %options = @_;
  my $name    = $options{name}  // ::name();
  my $state   = $options{state} // ::state();
  my $other   = $state ne $transient{initial} ? 33 : 30;
  my $locked  = ::is_locked() ? "\033[1;31mlocked\033[0;0m" : '';

  "\033[1;32m$name\033[1;${other}m" . substr($state, 0, 4) . "\033[0;0m$locked\033[1;34m$options{stuff}\033[0;0m "}

sub repl {
  my %options = @_;

  my $term = new Term::ReadLine "$0 shell";
  $term->ornaments(0);
  my $attribs = $term->Attribs;
  $attribs->{completion_entry_function} = $attribs->{list_completion_function};

  my $autocomplete = $options{autocomplete} || sub {[sort keys %data, sort keys %externalized_functions]};
  my $prompt       = $options{prompt}       || \&prompt;
  my $parse        = $options{parse}        || sub {parse(tokenize(@_))};
  my $command      = $options{command}      || sub {my ($command) = @_; ::around_hook('shell-command', $command, sub {print ::dangerous('', sub {execute($command)}), "\n"})};

  &$command(&$parse($_)) while ($attribs->{completion_word} = &$autocomplete(), defined($_ = $term->readline(&$prompt())))}
__7df727b3be0d8579da3fee5144041f75
meta::library('terminal', <<'__c52308d05ebb4ff61c5fc36e6d9c7a8a');
# Functions for nice-looking terminal output.
package terminal;

my $process = ::name();

sub message {print STDERR "[$_[0]] $_[1]\n"}
sub color {
  my ($name, $color) = @_;
  *{"terminal::$name"} = sub {chomp($_), print STDERR "\033[1;30m$process(\033[1;${color}m$name\033[1;30m)\033[0;0m $_\n" for map join('', $_), @_}}

my %preloaded = (info => 32, progress => 32, state => 34, debug => 34, warning => 33, error => 31);
color $_, $preloaded{$_} for keys %preloaded;
__c52308d05ebb4ff61c5fc36e6d9c7a8a
meta::message_color('state', 'purple');
meta::message_color('states', 'yellow');
meta::parent('./sdoc', <<'__6b80e7e220f0ce19851eaf5bb9cf2fc7');
function::sdoc
function::sdocp
meta::type::sdoc
parent::/home/spencertipping/bin/object
retriever::sdoc
retriever::sdocp
__6b80e7e220f0ce19851eaf5bb9cf2fc7
meta::parent('/home/spencertipping/bin/configuration', <<'__511208c99d8bc2caa3067db9f1824163');
meta::type::configuration
parent::/home/spencertipping/bin/object
__511208c99d8bc2caa3067db9f1824163
meta::parent('/home/spencertipping/bin/literate-project', <<'__4ced89c3efef0795b9c0d58083d94797');
function::clean
function::compile
function::make
function::render
function::tex
function::view
internal_function::main
meta::externalize_template
meta::functor::code-templates
meta::functor::tex-templates
meta::template::beamer
meta::template::code
meta::template::document
meta::template::enumeration
meta::template::math
meta::template::quotations
meta::template::sections
meta::type::resource
meta::type::section
parent::development
resource::header
resource::header-languages
resource::header-listings
resource::header-packages
resource::header-refs
resource::header-resource
template::item[]
vim_highlighter::cltex
__4ced89c3efef0795b9c0d58083d94797
meta::parent('/home/spencertipping/bin/object', <<'__40cc4bb813030b3d1a49faba89a17775');
bootstrap::html
bootstrap::initialization
bootstrap::perldoc
function::alias
function::cat
function::cc
function::child
function::clone
function::cp
function::create
function::current-state
function::disable
function::edit
function::enable
function::export
function::extern
function::grep
function::hash
function::hook
function::hooks
function::identity
function::import
function::initial-state
function::is
function::load-state
function::lock
function::ls
function::mv
function::name
function::parents
function::perl
function::reload
function::rm
function::save
function::save-state
function::serialize
function::serialize_single
function::sh
function::shell
function::size
function::snapshot
function::state
function::touch
function::unlock
function::update
function::update-from
function::usage
function::verify
internal_function::around_hook
internal_function::associate
internal_function::attribute
internal_function::chmod_self
internal_function::dangerous
internal_function::debug_trace
internal_function::execute
internal_function::exported
internal_function::extension_for
internal_function::fast_hash
internal_function::file::read
internal_function::file::write
internal_function::fnv_hash
internal_function::hypothetically
internal_function::internal::main
internal_function::invoke_editor_on
internal_function::is_locked
internal_function::namespace
internal_function::retrieve
internal_function::retrieve_with_hooks
internal_function::select_keys
internal_function::separate_options
internal_function::strip
internal_function::table_display
internal_function::temporary_name
internal_function::translate_backtrace
internal_function::with_exported
library::shell
library::terminal
message_color::state
message_color::states
meta::configure
meta::externalize
meta::functor::editable
meta::type::alias
meta::type::bootstrap
meta::type::data
meta::type::function
meta::type::hook
meta::type::inc
meta::type::internal_function
meta::type::library
meta::type::message_color
meta::type::meta
meta::type::parent
meta::type::retriever
meta::type::state
retriever::file
retriever::id
__40cc4bb813030b3d1a49faba89a17775
meta::parent('configuration', <<'__511208c99d8bc2caa3067db9f1824163');
meta::type::configuration
parent::/home/spencertipping/bin/object
__511208c99d8bc2caa3067db9f1824163
meta::parent('development', <<'__5ae2b1219bdd923f064ef07b811e59f1');
parent::./sdoc
parent::configuration
parent::notes
parent::preprocessor
parent::repository
parent::vim-highlighters
__5ae2b1219bdd923f064ef07b811e59f1
meta::parent('notes', <<'__885245820bcb60424dfcbd480e5b966e');
function::note
function::notes
meta::type::note
parent::object
__885245820bcb60424dfcbd480e5b966e
meta::parent('object', <<'__40cc4bb813030b3d1a49faba89a17775');
bootstrap::html
bootstrap::initialization
bootstrap::perldoc
function::alias
function::cat
function::cc
function::child
function::clone
function::cp
function::create
function::current-state
function::disable
function::edit
function::enable
function::export
function::extern
function::grep
function::hash
function::hook
function::hooks
function::identity
function::import
function::initial-state
function::is
function::load-state
function::lock
function::ls
function::mv
function::name
function::parents
function::perl
function::reload
function::rm
function::save
function::save-state
function::serialize
function::serialize_single
function::sh
function::shell
function::size
function::snapshot
function::state
function::touch
function::unlock
function::update
function::update-from
function::usage
function::verify
internal_function::around_hook
internal_function::associate
internal_function::attribute
internal_function::chmod_self
internal_function::dangerous
internal_function::debug_trace
internal_function::execute
internal_function::exported
internal_function::extension_for
internal_function::fast_hash
internal_function::file::read
internal_function::file::write
internal_function::fnv_hash
internal_function::hypothetically
internal_function::internal::main
internal_function::invoke_editor_on
internal_function::is_locked
internal_function::namespace
internal_function::retrieve
internal_function::retrieve_with_hooks
internal_function::select_keys
internal_function::separate_options
internal_function::strip
internal_function::table_display
internal_function::temporary_name
internal_function::translate_backtrace
internal_function::with_exported
library::shell
library::terminal
message_color::state
message_color::states
meta::configure
meta::externalize
meta::functor::editable
meta::type::alias
meta::type::bootstrap
meta::type::data
meta::type::function
meta::type::hook
meta::type::inc
meta::type::internal_function
meta::type::library
meta::type::message_color
meta::type::meta
meta::type::parent
meta::type::retriever
meta::type::state
retriever::file
retriever::id
__40cc4bb813030b3d1a49faba89a17775
meta::parent('preprocessor', <<'__a29d7395a865c21764fce8ec08e1a668');
function::preprocess
meta::type::template
parent::object
retriever::pp
template::comment
template::eval
template::failing_conditional
template::include
template::pinclude
__a29d7395a865c21764fce8ec08e1a668
meta::parent('repository', <<'__f88c2b0e5725507b3fdb5719fd65e6d3');
function::dupdate
meta::type::cached_dependency
parent::/home/spencertipping/bin/configuration
__f88c2b0e5725507b3fdb5719fd65e6d3
meta::parent('vim-highlighters', <<'__1258d5867978f2068c8efd130c2066f7');
function::vim
meta::type::vim_highlighter
parent::object
__1258d5867978f2068c8efd130c2066f7
meta::resource('header', <<'__efe6254be4f73fb4170ab1980a1888d5');
- include resource::header-packages
- include resource::header-listings

- include resource::header-refs

- include resource::header-languages
- include resource::header-resource
__efe6254be4f73fb4170ab1980a1888d5
meta::resource('header-languages', <<'__a3965f910e7c2a1aa3a9d052f7daf573');
\lstnewenvironment{asmcode}       {}{}
\lstnewenvironment{cppcode}       {\lstset{language=c++}}{}
\lstnewenvironment{javacode}      {\lstset{language=java}}{}
\lstnewenvironment{javascriptcode}{}{}
\lstnewenvironment{htmlcode}      {\lstset{language=html}}{}
\lstnewenvironment{perlcode}      {\lstset{language=perl}}{}
__a3965f910e7c2a1aa3a9d052f7daf573
meta::resource('header-listings', <<'__4caf6ff3ff152cce49ad5d1775ad0703');
\definecolor{gray}{rgb}{0.6,0.6,0.6}

\usepackage{caption}
\DeclareCaptionFormat{listing}{\llap{\color{gray}#1\hspace{10pt}}\tt{}#3}
\captionsetup[lstlisting]{format=listing, singlelinecheck=false, margin=0pt, font={bf}}

\lstset{columns=fixed,basicstyle={\tt},numbers=left,firstnumber=auto,basewidth=0.5em,showstringspaces=false,numberstyle={\color{gray}\scriptsize}}
__4caf6ff3ff152cce49ad5d1775ad0703
meta::resource('header-packages', <<'__5a7e0bd196996326e6278b6dc308371c');
\usepackage[utf8]{inputenc}
\usepackage{amsmath,amssymb,amsthm,pxfonts,listings,color}
\usepackage[colorlinks]{hyperref}
__5a7e0bd196996326e6278b6dc308371c
meta::resource('header-refs', '\\newcommand{\\Ref}[2]{\\hyperref[#2]{#1 \\ref*{#2}}}');
meta::resource('header-resource', '\\lstnewenvironment{resourcecode}{}{}');
meta::retriever('file', '-f $_[0] ? file::read($_[0]) : undef;');
meta::retriever('id', '$_[0] =~ /^id::/ ? substr($_[0], 4) : undef;');
meta::retriever('pp', <<'__f4a8c288d69963d6ebc5ce0bf7794777');
return undef unless namespace($_[0]) eq 'pp';
my $attr = retrieve(attribute($_[0]));
defined $attr ? preprocess($attr) : undef;
__f4a8c288d69963d6ebc5ce0bf7794777
meta::section('a-big-quine', <<'__21026d5444edc24feb376c6a30cb3eb7');
- sc A Big Quine | sec:a-big-quine
  At the core of things, a self-modifying Perl script is just a big quine.\footnote{A ``quine'' being a program that prints its own source.} There are only two real differences:

  - enumerate << end
    - item Self-modifying Perl scripts print into their own files rather than to standard output.
    - item They print modified versions of themselves, not the original source.
  - end

  \noindent If we're going to write such a script, it's good to start with a simple quine.

  - s1 A basic quine | sec:a-basic-quine
    Some languages make quine-writing easier than others. Perl actually makes it very simple. Here's one:

    - perl examples/quine << end
      my $code = <<'EOF';
      print 'my $code = <<\'EOF\';', "\n", $code, "EOF\n"; print $code;
      EOF
      print 'my $code = <<\'EOF\';', "\n", $code, "EOF\n"; print $code;
    - end

    \noindent The logic is fairly straightforward, though it may not look like it. We're quoting a bunch of stuff using \verb|<<'EOF'|,\footnote{The single-quoted heredoc form doesn't do any
    interpolation inside the document, which is ideal since we don't want to worry about escaping stuff.} and storing that into a string. We then put the quoted content outside of the heredoc
    to let it execute. The duplication is necessary; we want to quote the content and then run it.\footnote{Later on I'll use {\tt eval} to reduce the amount of duplication.} The key is this
    line:

    - verbatim << end
      print 'my $code = <<\'EOF\';', "\n", $code, "EOF\n"; print $code;
    - end

    \noindent This code prints the setup to define a new variable \verb|$code| and prints its existing content after that.

  - s1 Reducing duplication | sec:reducing-duplication
    We don't want to write everything in our quine twice. Rather, we want to store most stuff just once and have a quine that scales well. The easiest way to do this is to use a hash to store
    the state, and serialize each key of the hash in the self-printing code. So instead of creating \verb|$code|, we'll create \verb|%data|:

    - perl examples/quine-with-data << end
      my %data;
      $data{code} = <<'EOF';
      print 'my %data;', "\n";
      print '$data{', $_, '} = <<\'EOF\';', "\n$data{$_}EOF\n" for keys %data;
      print $data{code};
      EOF
      print 'my %data;', "\n";
      print '$data{', $_, '} = <<\'EOF\';', "\n$data{$_}EOF\n" for keys %data;
      print $data{code};
    - end

    \noindent This is a good start. Here's how to add attributes without duplication:

    - perl examples/quine-with-data-and-foo << end
      my %data;
      $data{foo} = <<'EOF';
      a string
      EOF
      $data{code} = <<'EOF';
      print 'my %data;', "\n";
      print '$data{', $_, '} = <<\'EOF\';', "\n$data{$_}EOF\n" for keys %data;
      print $data{code};
      EOF
      print 'my %data;', "\n";
      print '$data{', $_, '} = <<\'EOF\';', "\n$data{$_}EOF\n" for keys %data;
      print $data{code};
    - end

  - s1 Using {\tt eval} | sec:using-eval
    The business about duplicating \verb|$data{code}| is easily remedied by just {\tt eval}ing \verb|$data{code}| at the end. This requires the {\tt eval} section to be duplicated, but it's
    smaller than \verb|$data{code}|. Here's the quine with that transformation:\footnote{Note that these quines might not actually print themselves identically due to hash-key ordering. This
    is fine; all of the keys are printed before we use them.}

    - perl examples/quine-with-data-and-eval << end
      my %data;
      $data{foo} = <<'EOF';
      a string
      EOF
      $data{code} = <<'EOF';
      print 'my %data;', "\n";
      print '$data{', $_, '} = <<\'EOF\';', "\n$data{$_}EOF\n" for keys %data;
      print $data{bootstrap};
      EOF
      $data{bootstrap} = <<'EOF';
      eval $data{code};
      EOF
      eval $data{code};
    - end

    \noindent The advantage of this approach is that all we'll ever have to duplicate is \verb|eval $data{code}| and \verb|my %data;|, which is fairly trivial. It's important that you
    understand what's going on here, since this idea is integral to everything going forward.\footnote{Alternatively, it probably also works to accept the code so far as magic and take my word
    for it that future code snippets do what they should. But it's probably less fun without the ``aha!'' moment.}
__21026d5444edc24feb376c6a30cb3eb7
meta::section('adding-a-repl', <<'__8e5597413f48bb8640ee662df12a472c');
- sc Adding a REPL | sec:adding-a-repl
  There are some ergonomic problems with the script as it stands. First, it should have a shebang line so that we don't have to use {\tt perl} explicitly. But more importantly, it should
  provide a REPL so that we don't have to keep calling it by name.

  The first question is how this should be invoked. It would be cool if we could run the script without arguments and get the REPL, but that will require some changes to the current {\tt
  code::main}. The ``right way'' to do it also requires a new data type.

  - s1 The {\tt data} data type | sec:adding-a-repl-the-data-data-type
    Sometimes we just want to store pieces of data without any particular meaning. We could use {\tt bootstrap::} for this, but it's cleaner to introduce a new data type altogether.

    - perl snippets/define-form-data << end
      meta::define_form 'data', sub {
        # Define a basic editing interface:
        my ($name, $value) = @_;
        *{$name} = sub {
          my ($command, $value) = @_;
          return $data{"data::$name"} unless @_;
          $data{"data::$name"} = $value if $command eq '=';
        };
      };
    - end

    This function we're defining lets us inspect and change a data attribute from the command line. Assuming {\tt data::foo}, for example:

    - verbatim << end
      $ perl script foo = bar
      bar
      $ perl script foo
      bar
      $ perl script foo = baz
      baz
      $
    - end

  - s1 Setting up the default action | sec:adding-a-repl-setting-up-the-default-action
    The default action can be stored in a {\tt data::} attribute:

    - verbatim << end
      meta::data('default-action', <<'EOF');
      shell
      EOF

      meta::code('main', <<'EOF');
      ...
      my $command = shift @ARGV || $data{'data::default-action'};
      print &$command(@ARGV);
      ...
      EOF
    - end

    Since all values are chomped already, we don't have to worry about the newline caused by the heredoc.

  - s1 Making the script executable | sec:adding-a-repl-making-the-script-executable
    This isn't hard at all. It means one extra line in the bootstrap logic, and another extra line in {\tt save}:

    - verbatim << end
      meta::bootstrap('initialization', <<'EOF');
      #!/usr/bin/perl
      ...
      EOF

      meta::function('save', <<'EOF');
      ...
        close $file;
        chmod 0744, $0; # Not perfect, but will fix later
      ...
      EOF
    - end

  - s1 The {\tt shell} function | sec:adding-a-repl-the-shell-function
    The idea here is to listen for commands from the user and simulate the \verb|@ARGV| interaction pattern. Readline is the simplest way to go about this:

    - perl snippets/shell-function-1 << end
      meta::function('shell', <<'EOF');
      use Term::ReadLine;
      my $term = new Term::ReadLine "$0 shell";
      $term->ornaments(0);
      my $output = $term->OUT || \*STDOUT;
      while (defined($_ = $term->readline("$0\$ "))) {
        my @args = grep length, split /\s+|("[^"\\]*(?:\\.)?")/o;
        my $function_name = shift @args;
        s/^"(.*)"$/\1/o, s/\\\\"/"/go for @args;

        if ($function_name) {
          chomp(my $result = eval {&$function_name(@args)});
          warn $@ if $@;
          print $output $result, "\n" unless $@;
        }
      }
      EOF
    - end

    This shell function does some minimal quotation-mark parsing so that you can use multi-word arguments, but otherwise it's fairly basic. The script's name is used as the shell prompt.

    It's OK to use {\tt use} inside of {\tt eval}ed functions. I think what happens is that it gets processed when the function is first created by {\tt meta::function}. But basically, Perl
    does the right thing and it works just fine as long as the module exists.

  - s1 Taking it to the max: tab-completion | sec:adding-a-repl-tab-completion
    If you have the GNU Readline library installed (Perl defaults to something else otherwise), you can get tab-autocompletion just like you can in Bash. Here's a {\tt complete} function
    written by my wife Joyce, modified slightly to make sense with this implementation:

    - perl snippets/complete-function-1 << end
      meta::function('complete', <<'EOF');
      my @attributes = sort keys %data;

      sub match {
        my ($text, @options) = @_;
        my @matches = sort grep /^$text/, @options;

        if    (@matches == 0) {return undef;}
        elsif (@matches == 1) {return $matches [0];}
        elsif (@matches >  1) {
          return ((longest ($matches [0], $matches [@matches - 1])), @matches);
        }
      }

      sub longest {
        my ($s1, $s2) = @_; 
        return substr ($s1, 0, length $1) if ($s1 ^ $s2) =~ /^(\0*)/;
        return ''; 
      }

      my ($text, $line) = @_;
      match ($text, @attributes);
      EOF
    - end

    Using this function is easy; we just add one line to {\tt shell}:

    - verbatim << end
      $term->Attribs->{attempted_completion_function} = \&complete;
      while (defined($_ = $term->readline("$0\$ "))) {
      ...
    - end

  - s1 Final result | sec:adding-a-repl-final-result
    Merging the shell and executable behavior in with the script from the last chapter, we now have:\footnote{You might notice that I'm still using {\tt EOF} as the marker in these scripts. As
    soon as the script is rewritten it will replace the {\tt EOF}s with hashes; in general, you can use any valid delimiter the first time around and the script will take it from there.}

    - perl examples/shell << end
      #!/usr/bin/perl
      my %data;
      my %datatypes;

      sub meta::define_form {
        my ($namespace, $delegate) = @_;
        $datatypes{$namespace} = $delegate;
        *{"meta::${namespace}::implementation"} = $delegate;
        *{"meta::$namespace"} = sub {
          my ($name, $value) = @_;
          chomp $value;
          $data{"${namespace}::$name"} = $value;
          $delegate->($name, $value);
        };
      }
      meta::define_form 'bootstrap', sub {};
      meta::define_form 'function', sub {
        my ($name, $body) = @_;
        *{$name} = eval "sub {\n$body\n}";
      };
      meta::define_form 'code', sub {
        my ($name, $value) = @_;
        eval $value;
      };
      meta::define_form 'data', sub {
        # Define a basic editing interface:
        my ($name, $value) = @_;
        *{$name} = sub {
          my ($command, $value) = @_;
          return $data{"data::$name"} unless @_;
          $data{"data::$name"} = $value if $command eq '=';
        };
      };

      meta::bootstrap('initialization', <<'EOF');
      #!/usr/bin/perl
      my %data;
      my %datatypes;

      sub meta::define_form {
        my ($namespace, $delegate) = @_;
        $datatypes{$namespace} = $delegate;
        *{"meta::${namespace}::implementation"} = $delegate;
        *{"meta::$namespace"} = sub {
          my ($name, $value) = @_;
          chomp $value;
          $data{"${namespace}::$name"} = $value;
          $delegate->($name, $value);
        };
      }
      meta::define_form 'bootstrap', sub {};
      meta::define_form 'function', sub {
        my ($name, $body) = @_;
        *{$name} = eval "sub {\n$body\n}";
      };
      meta::define_form 'code', sub {
        my ($name, $value) = @_;
        eval $value;
      };
      meta::define_form 'data', sub {
        # Define a basic editing interface:
        my ($name, $value) = @_;
        *{$name} = sub {
          my ($command, $value) = @_;
          return $data{"data::$name"} unless @_;
          $data{"data::$name"} = $value if $command eq '=';
        };
      };
      EOF

      meta::data('default-action', <<'EOF');
      shell
      EOF

      meta::function('serialize', <<'EOF');
      my @keys = sort keys %data;
      join "\n", $data{'bootstrap::initialization'},
                 map(serialize_single($_), grep !/^code::/, @keys),
                 map(serialize_single($_), grep  /^code::/, @keys),
                 "\n__END__";
      EOF

      meta::function('serialize_single', <<'EOF');
      my ($namespace, $name) = split /::/, $_[0], 2;
      my $marker = '__' . fast_hash($data{$_[0]});
      "meta::$namespace('$name', <<'$marker');\n$data{$_[0]}\n$marker";
      EOF

      meta::function('fnv_hash', <<'EOF');
      my ($data) = @_;
      my ($fnv_prime, $fnv_offset) = (16777619, 2166136261);
      my $hash                     = $fnv_offset;
      my $modulus                  = 2 ** 32;
      $hash = ($hash ^ ($_ & 0xffff) ^ ($_ >> 16)) * $fnv_prime % $modulus
        for unpack 'L*', $data . substr($data, -4) x 8;
      $hash;
      EOF

      meta::function('fast_hash', <<'EOF');
      my ($data)     = @_;
      my $piece_size = length($data) >> 3;
      my @pieces     = (substr($data, $piece_size * 8) . length($data),
                        map(substr($data, $piece_size * $_, $piece_size), 0 .. 7));
      my @hashes     = (fnv_hash($pieces[0]));
      push @hashes, fnv_hash($pieces[$_ + 1] . $hashes[$_]) for 0 .. 7;
      $hashes[$_] ^= $hashes[$_ + 4] >> 16 | ($hashes[$_ + 4] & 0xffff) << 16 for 0 .. 3;
      $hashes[0]  ^= $hashes[8];
      sprintf '%08x' x 4, @hashes[0 .. 3];
      EOF

      meta::function('state', <<'EOF');
      fast_hash(serialize());
      EOF

      meta::function('verify', <<'EOF');
      my $serialized_data = serialize();
      my $state           = state();

      my $temporary_filename = "$0.$state";
      open my $file, '>', $temporary_filename;
      print $file $serialized_data;
      close $file;
      chmod 0700, $temporary_filename;
      chomp(my $observed_state = join '', qx|perl '$temporary_filename' state|);
      my $result = $observed_state eq $state;
      unlink $temporary_filename if $result;
      $result;
      EOF

      meta::function('save', <<'EOF');
      if (verify()) {
        open my $file, '>', $0;
        print $file serialize();
        close $file;
        chmod 0744, $0;
      } else {
        warn 'Verification failed';
      }
      EOF

      meta::function('cat', <<'EOF');
      join "\n", @data{@_};
      EOF

      meta::function('set', <<'EOF');
      $data{$_[0]} = join '', <STDIN>;
      EOF

      meta::function('complete', <<'EOF');
      my @attributes = sort keys %data;
      sub match {
        my ($text, @options) = @_;
        my @matches = sort grep /^$text/, @options;

        if    (@matches == 0) {return undef;}
        elsif (@matches == 1) {return $matches [0];}
        elsif (@matches >  1) {
          return ((longest ($matches [0], $matches [@matches - 1])), @matches);
        }
      }
      sub longest {
        my ($s1, $s2) = @_; 
        return substr ($s1, 0, length $1) if ($s1 ^ $s2) =~ /^(\0*)/;
        return ''; 
      }
      my ($text, $line) = @_;
      match ($text, @attributes);
      EOF

      meta::function('shell', <<'EOF');
      use Term::ReadLine;
      my $term = new Term::ReadLine "$0 shell";
      $term->ornaments(0);
      my $output = $term->OUT || \*STDOUT;
      $term->Attribs->{attempted_completion_function} = \&complete;
      while (defined($_ = $term->readline("$0\$ "))) {
        my @args = grep length, split /\s+|("[^"\\]*(?:\\.)?")/o;
        my $function_name = shift @args;
        s/^"(.*)"$/\1/o, s/\\\\"/"/go for @args;

        if ($function_name) {
          chomp(my $result = eval {&$function_name(@args)});
          warn $@ if $@;
          print $output $result, "\n" unless $@;
        }
      }
      EOF

      meta::function('edit', <<'EOF');
      my $filename = '/tmp/' . rand();
      open my $file, '>', $filename;
      print $file $data{$_[0]};
      close $file;
      system($ENV{EDITOR} || $ENV{VISUAL} || '/usr/bin/nano', $filename);
      open my $file, '<', $filename;
      $data{$_[0]} = join '', <$file>;
      close $file;
      EOF

      meta::code('main', <<'EOF');
      my $initial_state = state();
      my $command = shift @ARGV || $data{'data::default-action'};
      print &$command(@ARGV);
      save() if state() ne $initial_state;
      EOF

      __END__
    - end
__8e5597413f48bb8640ee662df12a472c
meta::section('archiving-state', <<'__9f77a9595c71bd1b32b992011f850357');
- sc Archiving state | sec:archiving-state
  Suppose you're about to do something risky with a script and you want to take a snapshot that you can restore to. You could copy into another file, but that's a brute-force approach and it
  requires you to exit the script's shell. Better is to have some kind of internal state management, and that's where explicit states come into play.

  Remember that \verb|%data| is just a variable; we can do all of the usual things with it. We can store a state by doing a partial serialization into an attribute, and we can restore from
  that state by {\tt eval}ing that attribute. To do this we're going to need another namespace.

  - perl snippets/state-type << end
    meta::meta('type::state', <<'EOF');
    # No action when a state is defined
    meta::define_form 'state', \&meta::bootstrap::implementation;
    EOF
  - end

  - s1 Saving state | sec:archiving-state-saving
    It's tempting to think that this code would do what we want:

    - verbatim << end
      # Won't work:
      associate("state::$_[0]", serialize());
    - end

    Unfortunately, {\tt serialize} generates three things that we don't want. These are the bootstrap section at the beginning, the call to {\tt internal::main()} at the end, and any attribute
    in the {\tt state::} namespace.\footnote{If some states contained others, the script size would grow exponentially in the number of states.} We'll need to write a separate function to
    serialize just what we want:

    - perl snippets/current-state-function << end
      meta::function('current-state', <<'EOF');
      my @valid_keys   = grep ! /^state::/, sort keys %data;
      my @ordered_keys = (grep(/^meta::/, @valid_keys), grep(! /^meta::/, @valid_keys));
      join "\n", map serialize_single($_), @ordered_keys;
      EOF
    - end

    \noindent And here's a {\tt save-state} function to automate the state creation process:

    - perl snippets/save-state-function << end
      meta::function('save-state', <<'EOF');
      my ($state_name) = @_;
      associate("state::$state_name", &{'current-state'}());
      EOF
    - end

  - s1 Loading state | sec:archiving-state-loading
    This is not as straightforward as saving state. Because we're modifying \verb|%data| live, we have to be careful about what happens in the event that something goes wrong. We also don't
    want to have stray \verb|%data| elements or externalized functions. The easiest way to defend against errors is to save the current state before applying a new one. Here's the
    implementation of {\tt load-state}:

    - perl snippets/load-state-function << end
      meta::function('load-state', <<'EOF');
      my ($state_name) = @_;
      my $state = retrieve("state::$state_name");
      &{'save-state'}('_');     # Make a backup
      delete $data{$_} for grep ! /^state::/, keys %data;
      %externalized_functions = ();
      eval($state);             # Apply the new state
      warn $@ if $@;
      verify();                 # Make sure it worked
      EOF
    - end

    If the load failed for some reason, you can restore using \verb|load-state _|. If it failed badly enough to bork your {\tt load-state} function, then you have a problem.

  - s1 The {\tt hypothetically} function | sec:archiving-state-hypothetically
    Related to state management is a function called {\tt hypothetically}, which lets you try something out and then revert. It's used internally to examine the state of a modified copy
    without actually committing changes.\footnote{This is covered in \Ref{chapter}{sec:cloning-and-inheritance}.} Here's how it's defined:

    - perl snippets/hypothetically-function << end
      meta::internal_function('hypothetically', <<'EOF');
      my %data_backup   = %data;
      my ($side_effect) = @_;
      my $return_value  = eval {&$side_effect()};
      %data = %data_backup;
      die $@ if $@;
      $return_value;
      EOF
    - end

    You can use it like this:

    - verbatim << end
      my $x = hypothetically(sub {
        associate('data::foo', '10');
        retrieve('data::foo');
      });
      my $y = retrieve('data::foo');
      # now $x eq '10' and $y is undef
    - end
__9f77a9595c71bd1b32b992011f850357
meta::section('building-the-interface', <<'__176ff10eb1aa6b839890b315b154d7ce');
- sc Building the interface | sec:building-the-interface
  Now that we've got attribute storage working, let's build a command-line interface so that we don't have to edit these files by hand anymore. There are a couple of things that need to
  happen. First, we need to get these scripts to overwrite themselves instead of printing to standard output. Second, we need a way to get and set entries in \verb|%data|. Starting with the
  quine from the last section, here's one way to go about it:

  - perl examples/cli-basic << end
    my %data;
    $data{cat} = <<'EOF';
    sub cat {
      print join "\n", @data{@_};
    }
    EOF
    $data{set} = <<'EOF';
    sub set {
      $data{$_[0]} = join '', <STDIN>;
    }
    EOF
    $data{code} = <<'EOF';
    # Eval functions into existence:
    eval $data{cat};
    eval $data{set};

    # Run specified command:
    my $command = shift @ARGV;
    &$command(@ARGV);

    # Save new state:
    open my $fh, '>', $0;
    print $fh 'my %data;', "\n";
    print $fh '$data{', $_, '} = <<\'EOF\';', "\n$data{$_}EOF\n" for keys %data;
    print $fh $data{bootstrap};
    close $fh;
    EOF
    $data{bootstrap} = <<'EOF';
    eval $data{code};
    EOF
    eval $data{code};
  - end

  \noindent Now we can modify its state:

  - verbatim << end
    $ perl examples/cli-basic cat cat
    sub cat {
      print join "\n", @data{@_};
    }
    $ perl examples/cli-basic set foo
    bar
    ^D
    $ perl examples/cli-basic cat foo
    bar
    $
  - end

  Not bad for a first implementation. This is a very minimal self-modifying Perl file, though it's useless at this point. It also has some fairly serious deficiencies (other than being
  useless). I'll cover the serious problems later on, but first let's address the usability.

  - s1 Using an editor | sec:using-an-editor
    The first thing that would help this script be more useful is a function that let you edit things with a real text editor. Fortunately this isn't difficult:

    - verbatim << end
      $ cp examples/cli-basic temp
      $ perl temp set edit
      sub edit {
        my $filename = '/tmp/' . rand();
        open my $file, '>', $filename;
        print $file $data{$_[0]};
        close $file;

        system($ENV{EDITOR} || $ENV{VISUAL} || '/usr/bin/nano', $filename);

        open my $file, '<', $filename;
        $data{$_[0]} = join '', <$file>;
        close $file;
      }
      ^D
      $
    - end

    It won't work yet though. The reason is that we aren't {\tt eval}ing {\tt edit} yet; we need to manually edit the {\tt code} section and insert this line:

    - verbatim << end
      ...
      eval $data{cat};
      eval $data{set};
      eval $data{edit};         # <- insert this
      ...
    - end

    Now you can invoke a text editor on any defined attribute:\footnote{Don't modify {\tt bootstrap} or break the print code though! This will possibly nuke your object.}

    - verbatim << end
      $ perl examples/cli-editor edit cat
      # hack away
      $
    - end

    Here's the object at this point:

    - perl examples/cli-editor << end
      my %data;
      $data{cat} = <<'EOF';
      sub cat {
        print join "\n", @data{@_};
      }
      EOF
      $data{set} = <<'EOF';
      sub set {
        $data{$_[0]} = join '', <STDIN>;
      }
      EOF
      $data{edit} = <<'EOF';
      sub edit {
        my $filename = '/tmp/' . rand();
        open my $file, '>', $filename;
        print $file $data{$_[0]};
        close $file;

        system($ENV{EDITOR} || $ENV{VISUAL} || '/usr/bin/nano', $filename);

        open my $file, '<', $filename;
        $data{$_[0]} = join '', <$file>;
        close $file;
      }
      EOF
      $data{code} = <<'EOF';
      # Eval functions into existence:
      eval $data{cat};
      eval $data{set};
      eval $data{edit};

      # Run specified command:
      my $command = shift @ARGV;
      &$command(@ARGV);

      # Save new state:
      open my $fh, '>', $0;
      print $fh 'my %data;', "\n";
      print $fh '$data{', $_, '} = <<\'EOF\';', "\n$data{$_}EOF\n" for keys %data;
      print $fh $data{bootstrap};
      close $fh;
      EOF
      $data{bootstrap} = <<'EOF';
      eval $data{code};
      EOF
      eval $data{code};
    - end
__176ff10eb1aa6b839890b315b154d7ce
meta::section('cloning-and-inheritance', <<'__c2f564bfb36d8f841dbf19cbc34f58ca');
- sc Cloning and inheritance | sec:cloning-and-inheritance
  This is probably the single coolest thing about self-modifying Perl programs. You've probably had this looming feeling that propagating updated versions of functions between scripts was
  going to be a complete nightmare. For a long time this was indeed the case; I had shell scripts that copied attributes out of one script and into another. Luckily I got tired of doing things
  that way and came up with the inheritance mechanism that's used now.

  Inheritance isn't as simple as copying all of the attributes from one script into another. Certain namespaces like {\tt data::} are script-specific, for instance. We'll need to have some way
  to keep track of which namespaces should be inherited.

  Another issue is getting attributes from one script into another. My first implementation of inheritance retrieved each attribute individually. It used {\tt ls} and {\tt cat} for the
  transfer, which involved $O(n)$ runs of whichever script was being inherited from. Obviously it was really slow. $O(n)$ runs of a function containing $n$ functions means $O(n^2)$ total time,
  and Perl isn't blazingly fast at {\tt eval}ing functions. Later on I extended {\tt serialize} to return a bundle of attributes that the child then {\tt eval}ed.

  - s1 Tracking inheritability | sec:cloning-and-inheritance-tracking-inheritability
    We're going to need another toplevel field if we want to store data about data types. We can't use \verb|%data|, since we don't really want to save it (whatever we're storing would be
    regenerated automatically anyway). What we really need is a way to store transient information:

    - verbatim << end
      my %data;
      my %externalized_functions;
      my %datatypes;
      my %transient;
    - end

    \verb|%transient| does nothing except store stuff while the script is running, and all of its information is discarded when the script exits. It's basically just a temporary workspace
    where we can stash stuff.

    We can now use \verb|%transient| to store things about data types. For convenience let's define {\tt meta::configure} to do this for us:\footnote{For some reason I decided to store the
    keys in the odd order of {\tt option}-{\tt namespace} instead of the other way around. I'm still not sure why I did it this way, but it doesn't seem to cause problems.}

    - perl snippets/meta-configure << end
      meta::meta('configure', <<'EOF');
      sub meta::configure {
        my ($datatype, %options) = @_;
        $transient{$_}{$datatype} = $options{$_} for keys %options;
      }
      EOF
    - end

    Now we can add a configuration to each datatype we define:

    - verbatim << end
      meta::meta('type::function', <<'EOF');
      meta::configure 'function', inherit => 1;
      meta::define_form 'function', ...;
      EOF

      meta::meta('type::data', <<'EOF');
      meta::configure 'data', inherit => 0;
      meta::define_form 'data', ...;
      EOF

      meta::meta('type::internal_function', <<'EOF');
      meta::configure 'internal_function', inherit => 1;
      ...
      EOF

      meta::meta('type::bootstrap', <<'EOF');
      meta::configure 'bootstrap', inherit => 1;
      ...
      EOF

      meta::meta('type::state', <<'EOF');
      meta::configure 'state', inherit => 0;
      ...
      EOF
    - end

  - s1 Extensions to {\tt serialize} | sec:cloning-and-inheritance-extensions-to-serialize
    {\tt serialize} needs to be able to give us a bundle of code to create just the attributes that should be inherited. While we're at it, it would also be nice if it handed us just the {\tt
    meta::} attributes and then just the non-{\tt meta::} attributes. This way we can make sure that the {\tt meta::} attributes didn't break anything and bail out early if they did.

    None of this is particularly challenging, but given that we're going to invoke {\tt serialize} externally we should probably fix the \verb|%options| stuff. (The last thing we want to write
    is something like \verb|qx($script serialize partial 1 meta 1 inheritable 1)|). What we need is an adapter that turns command-line options into Perl hashes.\footnote{OK, I'm making a jump
    here. Later it will become clearer why it's good to do it this way.} Here's a function that uses {\tt Getopt}-style parsing:

    - perl snippets/separate-options-function << end
      meta::internal_function('separate_options', <<'EOF');
      # Things with one dash are short-form options, two dashes are long-form.
      # Characters after short-form are combined; so -auv4 becomes -a -u -v -4.
      # Also finds equivalences; so --foo=bar separates into $$options{'--foo'} eq 'bar'.
      # Stops processing at the -- option, and removes it. Everything after that
      # is considered to be an 'other' argument.

      # The only form not supported by this function is the short-form with argument.
      # To pass keyed arguments, you need to use long-form options.
      my @parseable;
      push @parseable, shift @_ until ! @_ or $_[0] eq '--';

      my @singles = grep /^-[^-]/, @parseable;
      my @longs   = grep /^--/,    @parseable;
      my @others  = grep ! /^-/,   @parseable;
      my @singles = map /-(.{2,})/ ? map("-$_", split(//, $1)) : $_, @singles;
      my %options;
        $options{$1} = $2 for grep /^([^=]+)=(.*)$/, @longs;
      ++$options{$_}      for grep ! /=/, @singles, @longs;

      ({%options}, @others, @_);
      EOF
    - end

    The output of this function is a reference to a hash of any keyword arguments (where short-form arguments are treated as increments) followed by any non-switch arguments (either because
    they came after \verb|--| or because they didn't start with a dash at all. For example, processing the arguments \verb|-xy --z=foo bar| would yield
    \verb|({-x => 1, -y => 1, --z => foo}, bar)|.\footnote{Given the similarity, I don't remember why I didn't just use {\tt Getopt::Long} for this stuff. I think I must have been having a NIH
    day.}

    Given the ability to pipe options into {\tt serialize} on the command-line, we just need to have it support a reasonably flexible selection interface. We'll later need to have {\tt ls}
    support the same options, so let's factor the key selector into its own function:

    - perl snippets/select-keys-function << end
      meta::internal_function('select_keys', <<'EOF');
      my %options  = @_;
      my $criteria = $options{'--criteria'} ||
                     $options{'--namespace'} && "^$options{'--namespace'}::" || '.';
      grep /$criteria/ && (! $options{'-i'} ||   $transient{inherit}{namespace($_)}) &&
                          (! $options{'-I'} || ! $transient{inherit}{namespace($_)}) &&
                          (! $options{'-S'} || ! /^state::/o) &&
                          (! $options{'-m'} ||   /^meta::/o) &&
                          (! $options{'-M'} || ! /^meta::/o), sort keys %data;
      EOF
    - end

    This function takes the \verb|%options| hash output by \verb|separate_options| as input and returns a list of keys into \verb|%data|. The somewhat odd logical structure of the {\tt grep}
    predicate is just implication: ``if \verb|$options{'-i'}| is set, then the key's namespace must be inheritable.''

    The new {\tt serialize} function is fairly simple; most of the heavy lifting is already done:

    - perl snippets/serialize-final << end
      meta::function('serialize', <<'EOF');
      my ($options, @criteria) = separate_options(@_);
      my $partial = $$options{'-p'};
      my $criteria = join '|', @criteria;
      my @attributes = map serialize_single($_), 
        select_keys(%$options, '-m' => 1, '--criteria' => $criteria),
        select_keys(%$options, '-M' => 1, '--criteria' => $criteria);
      my @final_array = @{$partial ? \@attributes :
                                     [retrieve('bootstrap::initialization'),
                                      @attributes,
                                      'internal::main();', '',
                                      '__END__']};
      join "\n", @final_array;
      EOF
    - end

    {\tt -m} and {\tt -M} select {\tt meta::} and non-{\tt meta::} attributes, respectively. We also provide criteria if the user has selected any. They're joined together with a pipe symbol
    because that forms a disjunction inside a regular expression (and criteria are regexps for attribute names). We also, somewhat importantly, have a {\tt -p} switch to produce a partial
    serialization. This leaves off the bootstrap code and the {\tt internal::main()} call. The only difference between this and {\tt current-state} is that {\tt current-state} also leaves out
    {\tt state::} attributes.\footnote{This version of {\tt serialize} also will do that for you if you pass the {\tt -S} option.}

  - s1 The {\tt update-from} function | sec:cloning-and-inheritance-the-update-from-function
    Here's where things start to get interesting. {\tt update-from} handles the case where you have two scripts {\tt base} and {\tt child}, and you want {\tt child} to inherit stuff from {\tt
    base}.\footnote{``Stuff'' is deliberately vague. Presumably we want to inherit every inheritable attribute though.} Here's a basic implementation:

    - perl snippets/update-from-function << end
      meta::function('update-from', <<'EOF');
      my ($options, @targets) = separate_options(@_);
      my %options = %$options;
      @targets or die 'Must specify at least one target to update from';
      my $save_state = ! ($options{'-n'} || $options{'--no-save'});
      my $force      =    $options{'-f'} || $options{'--force'};

      &{'save-state'}('before-update') if $save_state;
      for my $target (@targets) {
        eval qx($target serialize -ipm);
        eval qx($target serialize -ipM);
        reload();     # We're about to define this
        unless (verify()) {
          if ($force) {
            warn 'Verification failed, but keeping new state';
          } else {
            warn "Verification failed after $target; reverting";
            return &{'load-state'}('before-update') if $save_state;
          }
        }
      }
      EOF
    - end

    If {\tt child} has this function, you can update it this way (assuming you've set execute permissions):

    - verbatim << end
      $ ./child update-from ./base
      $
    - end

    If all goes well it will execute without failing. {\tt base} will be run twice: once to grab inheritable {\tt meta::}-attributes, again to grab inheritable other attributes.

    The {\tt reload} function just calls {\tt execute} on each member of \verb|%data|. It's there to make sure that the new attributes and the old attributes work well together. Here's the
    definition:

    - perl snippets/reload-function << end
      meta::function('reload', <<'EOF');
      execute($_) for grep ! /^bootstrap::/, keys %data;
      EOF
    - end

  - s1 Managing parents | sec:cloning-and-inheritance-managing-parents
    If you're using scripts as add-on modules, it gets tiring to issue $n$ {\tt update-from} commands when you're using $n$ modules. Further, you have to type out the whole path of the module,
    which might be in a separate directory. Finally, attributes that later get deleted or renamed in the addon modules won't be cleaned up in the child script. The way we've got inheritance
    set up is woefully incomplete.

    The missing piece is parent tracking. We need to keep track of two things:

    - enumerate << end
      - item Which scripts have I inherited from?
      - item Which properties did I inherit from each one?
    - end

    Fortunately this isn't too hard. We just need a new namespace and some new functions.

    - s2 The {\tt parent::} namespace | sec:cloning-and-inheritance-the-parent-namespace
      We can use the {\tt parent::} namespace to answer both of the above questions. Each attribute will take its name from the path to a script (e.g.~{\tt parent::/usr/bin/script1}), and its
      contents will be a newline-separated string of the attributes inherited from that script. Here's the type definition:

      - perl snippets/parent-type << end
        meta::meta('type::parent', <<'EOF');
        meta::configure 'parent', inherit => 1; # Transitive parents (explained below)
        meta::define_form 'parent', \&meta::bootstrap::implementation;
        EOF
      - end

      Now we need to update {\tt update-from} to populate this namespace. Before we do, though, we need to define uniqueness.

    - s2 Uniqueness | sec:cloning-and-inheritance-uniqueness
      Let's suppose you've got three objects {\tt a}, {\tt b}, and {\tt c}, and each inherits from the previous one.\footnote{I'm presupposing that inheritance works automatically even though
      we haven't defined it quite yet.} Then {\tt b}'s parent is {\tt a}, and {\tt c}'s parent is {\tt b}. It's important for {\tt c} to know that {\tt a} is also its parent. The reason is
      that otherwise you're forced to update {\tt b} before {\tt c}, since {\tt c} inherits only from {\tt b}.

      It's ultimately for this reason that {\tt parent::} attributes get inherited. Inheritance is certainly transitive (if {\tt c} inherits from {\tt b}, which inherits from {\tt a}, then
      {\tt c} inherits from {\tt a}). There are, however, some logistical matters to be dealt with. The most important one has to do with ordering.

      It shouldn't matter in which order the parents are inherited from. This is an interesting requirement, because it means that the things an object inherits from each of its parents form
      disjoint sets. The only way to pull this off is if each object keeps track of how it's different from its own parents. The attributes that the child has but the parent doesn't are
      considered unique.

    - s2 Updating {\tt ls} and {\tt serialize} | sec:cloning-and-inheritance-updating-ls-and-serialize
      We need a way to ask {\tt ls} for the list of unique attributes for an object, and then ask {\tt serialize} to give us just those attributes. To do this, we'll add a {\tt -u} option (and
      for symmetry a complement {\tt -U}) to \verb|select_keys|:

      - perl snippets/select-keys-final << end
        meta::internal_function('select_keys', <<'EOF');
        my %options   = @_;
        my %inherited = map {$_ => 1} split /\n/o, join "\n",
                          retrieve(grep /^parent::/o, sort keys %data)
                          if $options{'-u'} or $options{'-U'};
        my $criteria  = $options{'--criteria'} ||
                        $options{'--namespace'} && "^$options{'--namespace'}::" || '.';
        grep /$criteria/ && (! $options{'-u'} || ! $inherited{$_}) &&
                            (! $options{'-U'} ||   $inherited{$_}) &&
                            (! $options{'-i'} ||   $transient{inherit}{namespace($_)}) &&
                            (! $options{'-I'} || ! $transient{inherit}{namespace($_)}) &&
                            (! $options{'-S'} || ! /^state::/o) &&
                            (! $options{'-m'} ||   /^meta::/o) &&
                            (! $options{'-M'} || ! /^meta::/o), sort keys %data;
        EOF
      - end

      The extra logic here searches through all of the {\tt parent::} attributes to find properties that the parents also contain. If any parent contains one, then the property isn't unique.

      {\tt serialize} will get this new behavior automatically, since it just forwards its options to \verb|select_keys|. But we haven't modified {\tt ls} in a long time; it doesn't know
      anything about options. There are actually quite a few enhancements that we could make to {\tt ls}, but for now let's keep it simple and change it only as necessary:

      - perl snippets/ls-with-options << end
        meta::function('ls', <<'EOF');
        my ($options, @criteria) = separate_options(@_);
        join "\n", select_keys('--criteria' => join '|', @criteria, %$options);
        EOF
      - end

      Now you can say things like {\tt ./script ls -iu} to get a listing of attributes that are both inheritable and unique.

    - s2 An updated {\tt update-from} function | sec:cloning-and-inheritance-an-updated-update-from-function
      {\tt update-from} now has three new responsibilities. One is to record the fact that we updated from another script, which involves creating a new {\tt parent::} attribute for each
      inheritance operation. Another is to ask each new parent which attributes it intends to define. The last thing it needs to do is clean up any attributes that some parent used to define
      but no longer does.\footnote{Due to how {\tt update-from} is structured, this step actually happens first.} Here's the new implementation:

      - perl snippets/update-from-final << end
        my ($options, @targets) = separate_options(@_);
        my %options = %$options;
        @targets or die 'Must specify at least one target to update from';
        my $save_state = ! ($options{'-n'} || $options{'--no-save'});
        my $no_parents =    $options{'-P'} || $options{'--no-parent'} || $options{'--no-parents'};
        my $force      =    $options{'-f'} || $options{'--force'};

        &{'save-state'}('before-update') if $save_state;
        for my $target (@targets) {
          # The -a flag will become relevant once we add formatting to 'ls'
          my $attributes = join '', qx($target ls -aiu);
          warn "Skipping unreachable object $target" unless $attributes;
          if ($attributes) {
            # Remove keys that the parent used to define but doesn't anymore:
            rm(split /\n/, retrieve("parent::$target")) if $data{"parent::$target"};
            associate("parent::$target", $attributes) unless $no_parents;
            eval qx($target serialize -ipmu);
            eval qx($target serialize -ipMu);
            warn $@ if $@;
            reload();

            if (verify()) {
              print "Successfully updated from $_[0]. ",
                    "Run 'load-state before-update' to undo this change.\n" if $save_state;
            } elsif ($force) {
              warn 'The object failed verification, but the failure state has been ' .
                   'kept because --force was specified.';
              warn 'At this point your object will not save properly, though backup ' .
                   'copies will be created.';
              print "Run 'load-state before-update' to undo the update and return to ",
                    "a working state.\n" if $save_state;
            } else {
              warn 'Verification failed after the upgrade was complete.';
              print "$0 has been reverted to its pre-upgrade state.\n" if $save_state;
              print "If you want to upgrade and keep the failure state, then run ",
                    "'update-from $target --force'." if $save_state;
              return &{'load-state'}('before-update') if $save_state;
            }
          }
        }
      - end

    - s2 The {\tt update} function | sec:cloning-and-inheritance-the-update-function
      This new {\tt update-from} function contains all of the logic to perform individual updates, but it still requires you to list the parent objects. There isn't any need to do this
      manually though, since if we look for {\tt parent::} attributes we can get the list. That's what {\tt update} does:

      - perl snippets/update-function << end
        meta::function('update', <<'EOF');
        &{'update-from'}(@_, grep s/^parent:://o, sort keys %data);
        EOF
      - end

  - s1 {\tt clone} and {\tt child} | sec:cloning-and-inheritance-clone-and-child
    As things stand creating children from an object is a bit cumbersome. We have to manually copy the object and then run {\tt update-from} once to get the parent to work out, which seems
    like too much work. Let's take care of copying first by creating a {\tt clone} function:

    - perl snippets/clone-function << end
      meta::function('clone', <<'EOF');
      open my $file, '>', $_[0];
      print $file serialize();
      close $file;
      chmod 0700, $_[0];
      EOF
    - end

    Now you can clone an object as it exists at any given moment. More interesting, though, is the related {\tt child} function, which creates an object already setup for inheritance:

    - perl snippets/child-function << end
      meta::function('child', <<'EOF');
      my ($child_name) = @_;
      clone($child_name);
      qx($child_name update-from $0 -n);
      EOF
    - end

    {\tt object} implements this function; so, for example, you could inherit from it like this:

    - verbatim << end
      $ /path/to/object child ./foo
      $ ./foo update -n
      $ ./foo ls -a parent::
      parent::/path/to/object
      $
    - end
__c2f564bfb36d8f841dbf19cbc34f58ca
meta::section('eval-backtraces', <<'__e1f1d6a9b2bd5065b8dd216b3900d1fb');
- sc {\tt eval} backtraces | sec:eval-backtraces
  Our script is fairly awesome so far. It prevents us from creating attributes in namespaces that don't exist, since that would cause incorrect serialization, it verifies before it saves, etc.
  But there's one problem. Take a look at the error messages we get:

  - verbatim << end
    $ perl examples/some-improvements
    examples/some-improvements$ create foo::bar
    Namespace foo does not exist at (eval 9) line 4.
    examples/some-improvements$
  - end

  If there's a problem in some attribute, we have no information about the location of the error other than ``eval $n$'' and the line number relative to that. {\tt object} solves this problem:

  - verbatim << end
    $ object
    object$ create foo::bar
      [error] Namespace foo does not exist at internal_function::associate line 4.
    object$
  - end

  The key is to wrap {\tt eval} in such a way that we can later resolve the meaningless numbers into useful locations. And to do this, we're going to need to modify the bootstrap code again.

  - verbatim << end
    my %data;
    my %externalized_functions;
    my %datatypes;
    my %locations;      # Maps eval-numbers to attribute names
  - end

  There's a beautiful hack to handle the {\tt eval} processing. Watch this (also in {\tt bootstrap::initialization}):\footnote{It actually doesn't have to be inside the bootstrap code, but it
  doesn't change often and is useful to have around, so I decided to put it there to save time.}

  - perl snippets/meta-eval-in << end
    sub meta::eval_in {
      my ($what, $where) = @_;
      # Obtain next eval-number and alias it to the designated location
      @locations{eval('__FILE__') =~ /\(eval (\d+)\)/} = ($where);  # <- step 1
      my $result = eval $what;                                      # <- step 2
      $@ =~ s/\(eval \d+\)/$where/ if $@;
      warn $@ if $@;
      $result;
    }
  - end

  By {\tt eval}ing \verb|__FILE__|, we get the current eval number. So the next one will be whatever we {\tt eval} next. This means that in the shell sessions above, \verb|%locations| contains
  a mapping from {\tt 9} to \verb|internal_function::associate|. Here's the function that converts an {\tt eval} index into an attribute name:

  - perl snippets/translate-backtrace-function << end
    meta::internal_function('translate_backtrace', <<'EOF');
    my ($trace) = @_;
    $trace =~ s/\(eval (\d+)\)/$locations{$1 - 1}/g;
    $trace;
    EOF
  - end

  Notice that we're subtracting one. The {\tt eval} number that triggered the error will be one greater than the one we stored.\footnote{Good API design would resolve this ahead-of-time rather
  than at lookup time. I haven't gotten around to changing it yet though.}

  Now that we have this mechanism, we can go back and convert {\tt eval} calls into \verb|meta::eval_in|:

  - perl snippets/using-eval-in << end
    meta::define_form 'function', sub {
      my ($name, $value) = @_;
      meta::externalize $name, "function::$name",
        meta::eval_in("sub {\n$value\n}", "function::$name");
    };

    meta::define_form 'internal_function', sub {
      my ($name, $value) = @_;
      *{$name} =
        meta::eval_in("sub {\n$value\n}", "internal_function::$name");
    };
  - end
__e1f1d6a9b2bd5065b8dd216b3900d1fb
meta::section('introduction', <<'__9efeff3048200656ac82feb7fd31c471');
- sc Introduction | sec:introduction
  I've gotten a lot of WTF's\footnote{\url{http://www.osnews.com/story/19266/WTFs_m}} about self-modifying Perl scripts. Rightfully so, too. There's no documentation (until now), the interface
  is opaque and not particularly portable, and they aren't even very human-readable when edited:

  - verbatim << end
    ...
    meta::define_form 'meta', sub {
      my ($name, $value) = @_;
      meta::eval_in($value, "meta::$name");
    };
    meta::meta('configure', <<'__25976e07665878d3fae18f050160343f');
    # A function to configure transients. Transients can be used to store any number of
    # different things, but one of the more common usages is type descriptors.
    sub meta::configure {
      my ($datatype, %options) = @_;
      $transient{$_}{$datatype} = $options{$_} for keys %options;
    }
    __25976e07665878d3fae18f050160343f
    ...
  - end

  Despite these shortcomings, though, I think they're fairly useful (this guide is a self-modifying Perl file, in fact). At the end, you'll have a script that is functionally equivalent to the
  {\tt object} script, which I use as the prototype for all of the other ones.\footnote{See \url{http://github.com/spencertipping/perl-objects} for the full source.} The full source code for
  this guide and accompanying examples is available at \url{http://github.com/spencertipping/writing-self-modifying-perl}.

  Proceed only with fortitude, determination, and Perl v5.10.
__9efeff3048200656ac82feb7fd31c471
meta::section('main', <<'__9e953c309b71c4bb194d97bd2e3a0888');
- documentclass report
- include resource::header

- title  Writing Self-Modifying Perl
- author Spencer Tipping

- document << end
  - maketitle
  - tableofcontents

  - include section::introduction

  - sp The Basics
  - include section::a-big-quine
  - include section::building-the-interface
  - include section::namespaces
  - include section::serialization
  - include section::adding-a-repl
  - include section::some-improvements

  - sp The Fun Stuff
  - include section::eval-backtraces
  - include section::archiving-state
  - include section::cloning-and-inheritance
- end
__9e953c309b71c4bb194d97bd2e3a0888
meta::section('namespaces', <<'__bf032d38e23448ba0cde689c132c3cec');
- sc Namespaces | sec:namespaces
  It's a bummer to have to add a new {\tt eval} line for every function we want to define. We could merge all of the functions into a single hash key, but that's too easy.\footnote{Aside from
  being a lame cop-out, it also limits extensibility, as I'll explain later.} More appropriate is to assign a type to each hash key. This can be encoded in the name. For example, we might
  convert the names like this:

  - verbatim << end
    set  -> function::set
    cat  -> function::cat
    edit -> function::edit
    code -> code::main
  - end

  For reasons that I'll explain in a moment, we no longer need {\tt bootstrap}. The rules governing these types are:

  - enumerate << end
    - item When we see a new {\tt function::} key, evaluate its contents.
    - item When we see a new {\tt code::} key, evaluate its contents. \label{item:run-code}
  - end

  \Ref{Rule}{item:run-code} is why we don't need {\tt bootstrap} anymore. Now you've probably noticed that these rules do exactly the same thing -- why are we differentiating between these
  types then? Two reasons. First, we need to make sure that functions are evaluated before the code section is evaluated (otherwise the functions won't exist when we need them). Second, it's
  because functions can be handled in a more useful way.

  - s1 Handling functions more usefully | sec:namespaces-handling-functions-more-usefully
    Remember how we had to write \verb|sub X {| and \verb|}| every time we wrote a function, despite the fact that the function name was identical to the name of the key in \verb|%data|?
    That's fairly lame, and it could become misleading if the names ever weren't the same. We really should have the script handle this for us. So instead of writing the function signature, we
    would just write its body:

    - verbatim << end
      # The body of 'cat':
      print join "\n", @data{@_};
    - end

    \noindent and infer its name from the key. Perl is helpful here by giving us first-class access to the symbol table:

    - perl snippets/create-function << end
      sub create_function {
        my ($name, $body) = @_;
        *{$name} = eval "sub {\n$body\n}";
      }
    - end

    If we're going to handle functions this way, we need to change the rule for {\tt function::} keys:

    - quote << end
      When we see a new {\tt function::} key, call \verb|create_function| on the key name (without the {\tt function::} part) and the value.
    - end

  - s1 Catching attribute creation | sec:namespaces-catching-attribute-creation
    We can't observe when a new key is added to \verb|%data| as things are now. Fortunately this is easy to fix. Instead of writing lines that read \verb|$data{...} = ...|, we can write some
    functions that perform this assignment for us, and in the process we can handle any side-effects like function creation. Here's a naive implementation:

    - perl snippets/define-function-define-code << end
      sub define_function {
        my ($name, $value) = @_;
        $data{$name} = $value;
        create_function $name, $value;
      }
      sub define_code {
        my ($name, $value) = @_;
        $data{$name} = $value;
      }
    - end

    Since we're always going to assign into \verb|%data|, we can abstract that step out:

    - perl snippets/define-definer << end
      sub define_definer {
        my ($name, $handler) = @_;
        *{$name} = sub {
          my ($name, $value) = @_;
          $data{$name} = $value;
          &$handler($name, $value);
        }
      }
      define_definer 'define_function', \&create_function;
      define_definer 'define_code', sub {
        my ($name, $value) = @_;
        eval $value;
      };
    - end

    To avoid the possibility of later collisions we should probably use a separate namespace for all of these functions, since really bad things happen if you inadvertently replace one. I use
    the {\tt meta::} namespace for this purpose in my scripts.

    At this point we've got the foundation for namespace creation. This is actually used with few modifications in the Perl objects I use on a regular basis. Here's \verb|meta::define_form|
    lifted from {\tt object}:

    - perl snippets/meta-define-form << end
      sub meta::define_form {
        my ($namespace, $delegate) = @_;
        $datatypes{$namespace} = $delegate;
        *{"meta::${namespace}::implementation"} = $delegate;
        *{"meta::$namespace"} = sub {
          my ($name, $value) = @_;
          chomp $value;
          $data{"${namespace}::$name"} = $value;
          $delegate->($name, $value);
        };
      }
    - end

    The idea is the same as \verb|define_definer|, but with a few extra lines. We stash the delegate in a \verb|%datatypes| table for later reference. We also (redundantly, I notice) create a
    function in the {\tt meta::} package so that we can refer to it when defining other forms. This lets us copy the behavior of namespaces but still have them be separate. The third line
    that's different is \verb|chomp $value|, which is used because heredocs put an extra newline on the end of strings. \verb|meta::define_form| has the same interface as
    \verb|define_definer|:

    - perl snippets/meta-define-form-function-code << end
      meta::define_form 'function', \&create_function;
      meta::define_form 'code', sub {
        my ($name, $value) = @_;
        eval $value;
      };
    - end

    Attribute definitions look a little different than they did before. The two \verb|define_form| calls above create the functions {\tt meta::function} and {\tt meta::code}, which will need
    to be called this way:

    - verbatim << end
      meta::function('cat', <<'EOF');
      print join "\n", @data{@_};
      EOF
      meta::code('main', <<'EOF');
      # No more eval statements!
      # Run command
      ...
      # Save stuff
      ...
      EOF
    - end

    Notice that we don't specify the full name of the attributes being created. \verb|meta::function('x', ...)| creates a key called {\tt function::x}; this was handled in the
    \verb|define_form| logic.

  - s1 Putting it all together | sec:namespaces-putting-it-all-together
    At this point we're all set to write another script. The overall structure is still basically the same even though each piece has changed a little:

    - perl examples/namespace-basic << end
      my %data;
      my %datatypes;

      sub meta::define_form {
        my ($namespace, $delegate) = @_;
        $datatypes{$namespace} = $delegate;
        *{"meta::${namespace}::implementation"} = $delegate;
        *{"meta::$namespace"} = sub {
          my ($name, $value) = @_;
          chomp $value;
          $data{"${namespace}::$name"} = $value;
          $delegate->($name, $value);
        };
      }
      meta::define_form 'function', sub {
        my ($name, $body) = @_;
        *{$name} = eval "sub {\n$body\n}";
      };
      meta::define_form 'code', sub {
        my ($name, $value) = @_;
        eval $value;
      };

      meta::function('cat', <<'EOF');
      print join "\n", @data{@_};
      EOF

      meta::code('main', <<'EOF');
      # Run specified command:
      my $command = shift @ARGV;
      &$command(@ARGV);

      # Save new state:
      open my $file, '>', $0;

      # Copy above bootstrapping logic:
      print $file <<'EOF2';
      my %data;
      my %datatypes;

      sub meta::define_form {
        my ($namespace, $delegate) = @_;
        $datatypes{$namespace} = $delegate;
        *{"meta::${namespace}::implementation"} = $delegate;
        *{"meta::$namespace"} = sub {
          my ($name, $value) = @_;
          chomp $value;
          $data{"${namespace}::$name"} = $value;
          $delegate->($name, $value);
        };
      }
      meta::define_form 'function', sub {
        my ($name, $body) = @_;
        *{$name} = eval "sub {\n$body\n}";
      };
      meta::define_form 'code', sub {
        my ($name, $value) = @_;
        eval $value;
      };
      EOF2

      # Serialize attributes (everything else before code):
      for (grep(!/^code::/, keys %data), grep(/^code::/, keys %data)) {
        my ($namespace, $name) = split /::/, $_, 2;
        print $file "meta::$namespace('$name', <<'EOF');\n$data{$_}\nEOF\n";
      }

      # Just for good measure:
      print $file "\n__END__";
      close $file;
      EOF

      __END__
    - end

    The most substantial changes were:

    - enumerate << end
      - item We're defining two hashes at the beginning, though we still just use \verb|%data|.
      - item We're using delegate functions to define attributes rather than assigning directly into \verb|%data|.
      - item Quoted values now get {\tt chomp}ed. I've added another \verb|\n| in the serialization logic to compensate for this.
      - item The serialization logic is now order-specific; it puts {\tt code::} entries after other things.
      - item The file now has an \verb|__END__| marker on it.
    - end

  - s1 Separating bootstrap code | sec:namespaces-separating-bootstrap-code
    The bootstrap code is now large quoted string inside {\tt code::main}, which isn't optimal. Better is to break it out into its own attribute. To do this, we'll need a new namespace that
    has no side-effect.\footnote{We can't use {\tt code::} because then the code would be evaluated twice; once because it's printed directly, and again because of the {\tt eval} in the {\tt
    code::} delegate.} I'll call this namespace {\tt bootstrap::}.

    - verbatim << end
      meta::define_form 'bootstrap', sub {};
    - end

    There's a special member of the {\tt bootstrap::} namespace that contains the code in the beginning of the file:

    - verbatim << end
      meta::bootstrap('initialization', <<'EOF');
      my %data;
      my %datatypes;
      ...
      EOF
    - end

    This condenses {\tt code::main} by a lot:

    - perl snippets/bootstrapped-code-main << end
      meta::code('main', <<'EOF');
      # Run specified command:
      my $command = shift @ARGV;
      &$command(@ARGV);

      # Save new state:
      open my $file, '>', $0;
      print $file $data{'bootstrap::initialization'};
      
      # Serialize attributes (everything else before code):
      for (grep(!/^code::/, keys %data), grep(/^code::/, keys %data)) {
        my ($namespace, $name) = split /::/, $_, 2;
        print $file "meta::$namespace('$name', <<'EOF');\n$data{$_}\nEOF\n";
      }

      # Just for good measure:
      print $file "\n__END__";
      close $file;
      EOF
    - end

    Here's the final product, after adding the {\tt set} and {\tt edit} functions from before:

    - perl examples/namespace-full << end
      my %data;
      my %datatypes;

      sub meta::define_form {
        my ($namespace, $delegate) = @_;
        $datatypes{$namespace} = $delegate;
        *{"meta::${namespace}::implementation"} = $delegate;
        *{"meta::$namespace"} = sub {
          my ($name, $value) = @_;
          chomp $value;
          $data{"${namespace}::$name"} = $value;
          $delegate->($name, $value);
        };
      }
      meta::define_form 'bootstrap', sub {};
      meta::define_form 'function', sub {
        my ($name, $body) = @_;
        *{$name} = eval "sub {\n$body\n}";
      };
      meta::define_form 'code', sub {
        my ($name, $value) = @_;
        eval $value;
      };

      meta::bootstrap('initialization', <<'EOF');
      my %data;
      my %datatypes;

      sub meta::define_form {
        my ($namespace, $delegate) = @_;
        $datatypes{$namespace} = $delegate;
        *{"meta::${namespace}::implementation"} = $delegate;
        *{"meta::$namespace"} = sub {
          my ($name, $value) = @_;
          chomp $value;
          $data{"${namespace}::$name"} = $value;
          $delegate->($name, $value);
        };
      }
      meta::define_form 'bootstrap', sub {};
      meta::define_form 'function', sub {
        my ($name, $body) = @_;
        *{$name} = eval "sub {\n$body\n}";
      };
      meta::define_form 'code', sub {
        my ($name, $value) = @_;
        eval $value;
      };
      EOF

      meta::function('cat', <<'EOF');
      print join "\n", @data{@_};
      EOF

      meta::function('set', <<'EOF');
      $data{$_[0]} = join '', <STDIN>;
      EOF

      meta::function('edit', <<'EOF');
      my $filename = '/tmp/' . rand();
      open my $file, '>', $filename;
      print $file $data{$_[0]};
      close $file;

      system($ENV{EDITOR} || $ENV{VISUAL} || '/usr/bin/nano', $filename);

      open my $file, '<', $filename;
      $data{$_[0]} = join '', <$file>;
      close $file;
      EOF

      meta::code('main', <<'EOF');
      # Run specified command:
      my $command = shift @ARGV;
      &$command(@ARGV);

      # Save new state:
      open my $file, '>', $0;
      print $file $data{'bootstrap::initialization'};
      
      # Serialize attributes (everything else before code):
      for (grep(!/^code::/, keys %data), grep(/^code::/, keys %data)) {
        my ($namespace, $name) = split /::/, $_, 2;
        print $file "meta::$namespace('$name', <<'EOF');\n$data{$_}\nEOF\n";
      }

      # Just for good measure:
      print $file "\n__END__";
      close $file;
      EOF

      __END__
    - end
__bf032d38e23448ba0cde689c132c3cec
meta::section('serialization', <<'__bf6841f10301900703a4886048832811');
- sc Serialization | sec:serialization
  Earlier I alluded to a glaring problem with these scripts as they stand. The issue is the {\tt EOF} marker we've been using. Here's what happens if we put a line containing {\tt EOF} into an
  attribute:

  - verbatim << end
    $ cp examples/basic-meta-with-functions temp
    $ perl temp set function::bif
    print <<'EOF';
    uh-oh...
    EOF
    ^D
    $ perl temp cat function::bif
    Can't locate object method "EOF" via package "meta::function" at temp line 31.
    $
  - end

  It's not hard to see what went wrong: {\tt temp} now has an attribute definition that looks like this:

  - verbatim << end
    meta::function('bif', <<'EOF');
    print <<'EOF';
    uh-oh...
    EOF

    EOF
  - end

  We need to come up with some end marker that isn't in the value being stored. For the moment let's use random numbers.\footnote{{\tt object} implements a simple FNV-hash and uses the hash of
  the contents. I'll go over how to implement this a bit later.}

  - s1 Fixing the {\tt EOF} markers | sec:serialization-fixing-the-eof-markers
    There isn't a particularly compelling reason to inline the serialization logic in {\tt code::main}. Since we have a low-overhead way of defining functions, let's make a {\tt serialize}
    function to return the state of a script as a string, along with a helper method \verb|serialize_single| to handle one attribute at a time:

    - perl snippets/serialize-and-serialize-single << end
      meta::function('serialize', <<'EOF');
      my @keys = sort keys %data;
      join "\n", $data{'bootstrap::initialization'},
                 map(serialize_single($_), grep !/^code::/, @keys),
                 map(serialize_single($_), grep  /^code::/, @keys),
                 "\n__END__";
      EOF

      meta::function('serialize_single', <<'EOF');
      my ($namespace, $name) = split /::/, $_[0], 2;
      my $marker = '__' . int(rand(1 << 31));
      "meta::$namespace('$name', <<'$marker');\n$data{$_[0]}\n$marker";
      EOF
    - end

    Sorting the keys is important. We'll be verifying the output of the serialization function, so it needs to be stable.

    Now {\tt code::main} is a bit simpler. With these new functions the file logic becomes:

    - verbatim << end
      open my $file, '>', $0;
      print $file serialize();
      close $file;
    - end

  - s1 Verifying serialization | sec:serialization-verifying-serialization
    What we've been doing is very unsafe. There isn't a backup file, so if the serialization goes wrong then we'll blindly nuke our original script. This is a big problem, so let's fix it. The
    new strategy will be to serialize to a temporary file, have that file generate a checksum, and make sure that the checksum is what we expect. Before we can implement such a mechanism,
    though, we'll need a string hash function.

    - s2 Implementing the Fowler-Noll Vo hash | sec:serialization-verifying-fnv-hash
      At its core, the FNV-1a hash\footnote{\url{http://en.wikipedia.org/wiki/Fowler-Noll-Vo_hash_function}} is just a multiply-xor in a loop. Generally it's written like this:

      - cpp snippets/fnv-hash.c << end
        int hash (char *s) {
          const int fnv_prime  = 16777619;      // Magic numbers
          const int fnv_offset = 2166136261;
          int result = fnv_offset;
          char c;
          while (c = *s++) {
            result ^= c;
            result *= fnv_prime;
          }
          return result;
        }
      - end

      In Perl it's advantageous to vectorize this function for performance reasons. It isn't necessarily sound to do this, but empirically the results seem reasonably well-distributed. Here's
      the function I ended up with:

      - perl snippets/fnv-hash-function << end
        meta::function('fnv_hash', <<'EOF');
        my ($data) = @_;

        my ($fnv_prime, $fnv_offset) = (16777619, 2166136261);
        my $hash                     = $fnv_offset;
        my $modulus                  = 2 ** 32;

        $hash = ($hash ^ ($_ & 0xffff) ^ ($_ >> 16)) * $fnv_prime % $modulus
          for unpack 'L*', $data . substr($data, -4) x 8;
        $hash;
        EOF
      - end

      This produces a 32-bit hash. Ideally we have something of at least 128 bits, just to reduce the likelihood of collision. When I was writing the 128-bit hash I went a bit overboard with
      hash chaining (which doesn't matter because it isn't a cryptographic hash), but here's the full hash:

      - perl snippets/fast-hash-function << end
        meta::function('fast_hash', <<'EOF');
        my ($data)     = @_;
        my $piece_size = length($data) >> 3;

        my @pieces     = (substr($data, $piece_size * 8) . length($data),
                          map(substr($data, $piece_size * $_, $piece_size), 0 .. 7));
        my @hashes     = (fnv_hash($pieces[0]));

        push @hashes, fnv_hash($pieces[$_ + 1] . $hashes[$_]) for 0 .. 7;

        $hashes[$_] ^= $hashes[$_ + 4] >> 16 | ($hashes[$_ + 4] & 0xffff) << 16 for 0 .. 3;
        $hashes[0]  ^= $hashes[8];

        sprintf '%08x' x 4, @hashes[0 .. 3];
        EOF
      - end

      The convolutedness of this logic is partially to accommodate for very short strings.

    - s2 Fixing {\tt EOF} markers again | sec:serialization-verifying-fixing-eof-markers-again
      It's probably fine to use random numbers for EOF markers, but I prefer using a hash of the content. While it's probably about the same either way, it intuitively feels less likely that a
      string will contain its own hash.\footnote{And as we all know, intuition is key when making decisions in math and computer science...}

      - perl snippets/serialize-single-hash << end
        meta::function('serialize_single', <<'EOF');
        my ($namespace, $name) = split /::/, $_[0], 2;
        my $marker = '__' . fast_hash($data{$_[0]});
        "meta::$namespace('$name', <<'$marker');\n$data{$_[0]}\n$marker";
        EOF
      - end

      We can also use the script state to get a tempfile in the {\tt edit} function.\footnote{{\tt object} uses {\tt File::Temp} to get temporary filenames. This is a better solution than
      anything involving pseudorandom names in {\tt /tmp}.}

    - s2 Implementing the {\tt state} function | sec:serialization-verifying-state-function
      The ``state'' of an object is just the hash of its serialization. (This is why it's useful to have the serialization logic factored out.)

      - perl snippets/state-function-hash << end
        meta::function('state', <<'EOF');
        fast_hash(serialize());
        EOF
      - end

    - s2 Implementing the {\tt verify} function | sec:serialization-verifying-verify-function
      {\tt verify} writes a temporary copy, checks its checksum, and returns {\tt 0} or {\tt 1} depending on whether the checksum came out invalid or valid, respectively. If invalid, it leaves
      the temporary file there for debugging purposes.

      - perl snippets/verify-function << end
        meta::function('verify', <<'EOF');
        my $serialized_data = serialize();
        my $state           = state();

        my $temporary_filename = "$0.$state";
        open my $file, '>', $temporary_filename;
        print $file $serialized_data;
        close $file;
        chmod 0700, $temporary_filename;

        chomp(my $observed_state = join '', qx|perl '$temporary_filename' state|);

        my $result = $observed_state eq $state;
        unlink $temporary_filename if $result;
        $result;
        EOF
      - end

  - s1 Save logic | sec:serialization-save-logic
    Now we can use {\tt verify} before overwriting \verb|$0|.

    - perl snippets/save-function-and-broken-usage << end
      meta::function('save', <<'EOF');
      if (verify()) {
        open my $file, '>', $0;
        print $file serialize();
        close $file;
      } else {
        warn 'Verification failed';
      }
      EOF

      meta::code('main', <<'EOF');
      ...
      save();
      EOF
    - end

  - s1 {\tt code::main} fixes | sec:serialization-code-main-fixes
    There's actually a fairly serious problem at this point. Every script saves itself unconditionally, which involves creating a temporary filename and verifying its contents. What happens
    when we run one then? Something like this:

    - verbatim << end
      $ perl some-script cat function::cat
      join "\n", @data{@_};     # Gets this much right
      # Now calls save(), which calls verify() to create a new temp script:
      > perl some-script.hash1 state
        hash1                   # Gets this much right
        # Now calls save(), which calls verify() to create a new temp script:
        > perl some-script.hash1.hash2 state
          ...
    - end

    That's not what we want at all. There's no reason to call {\tt save} unless a modification has occurred, so we can make this modification to {\tt code::main}:

    - perl snippets/code-main-with-fixed-save << end
      meta::code('main', <<'EOF');
      my $initial_state = state();
      my $command = shift @ARGV;
      print &$command(@ARGV);    # Also printing the result -- important for state
      save() if state() ne $initial_state;
      EOF
    - end

  - s1 Final result | sec:serialization-final-result
    At this point we have an extensible and reasonably robust script. Here's what we've got so far:

    - perl examples/verified << end
      my %data;
      my %datatypes;

      sub meta::define_form {
        my ($namespace, $delegate) = @_;
        $datatypes{$namespace} = $delegate;
        *{"meta::${namespace}::implementation"} = $delegate;
        *{"meta::$namespace"} = sub {
          my ($name, $value) = @_;
          chomp $value;
          $data{"${namespace}::$name"} = $value;
          $delegate->($name, $value);
        };
      }
      meta::define_form 'bootstrap', sub {};
      meta::define_form 'function', sub {
        my ($name, $body) = @_;
        *{$name} = eval "sub {\n$body\n}";
      };
      meta::define_form 'code', sub {
        my ($name, $value) = @_;
        eval $value;
      };

      meta::bootstrap('initialization', <<'EOF');
      my %data;
      my %datatypes;

      sub meta::define_form {
        my ($namespace, $delegate) = @_;
        $datatypes{$namespace} = $delegate;
        *{"meta::${namespace}::implementation"} = $delegate;
        *{"meta::$namespace"} = sub {
          my ($name, $value) = @_;
          chomp $value;
          $data{"${namespace}::$name"} = $value;
          $delegate->($name, $value);
        };
      }
      meta::define_form 'bootstrap', sub {};
      meta::define_form 'function', sub {
        my ($name, $body) = @_;
        *{$name} = eval "sub {\n$body\n}";
      };
      meta::define_form 'code', sub {
        my ($name, $value) = @_;
        eval $value;
      };
      EOF

      meta::function('serialize', <<'EOF');
      my @keys = sort keys %data;
      join "\n", $data{'bootstrap::initialization'},
                 map(serialize_single($_), grep !/^code::/, @keys),
                 map(serialize_single($_), grep  /^code::/, @keys),
                 "\n__END__";
      EOF

      meta::function('serialize_single', <<'EOF');
      my ($namespace, $name) = split /::/, $_[0], 2;
      my $marker = '__' . fast_hash($data{$_[0]});
      "meta::$namespace('$name', <<'$marker');\n$data{$_[0]}\n$marker";
      EOF

      meta::function('fnv_hash', <<'EOF');
      my ($data) = @_;
      my ($fnv_prime, $fnv_offset) = (16777619, 2166136261);
      my $hash                     = $fnv_offset;
      my $modulus                  = 2 ** 32;
      $hash = ($hash ^ ($_ & 0xffff) ^ ($_ >> 16)) * $fnv_prime % $modulus
        for unpack 'L*', $data . substr($data, -4) x 8;
      $hash;
      EOF

      meta::function('fast_hash', <<'EOF');
      my ($data)     = @_;
      my $piece_size = length($data) >> 3;
      my @pieces     = (substr($data, $piece_size * 8) . length($data),
                        map(substr($data, $piece_size * $_, $piece_size), 0 .. 7));
      my @hashes     = (fnv_hash($pieces[0]));
      push @hashes, fnv_hash($pieces[$_ + 1] . $hashes[$_]) for 0 .. 7;
      $hashes[$_] ^= $hashes[$_ + 4] >> 16 | ($hashes[$_ + 4] & 0xffff) << 16 for 0 .. 3;
      $hashes[0]  ^= $hashes[8];
      sprintf '%08x' x 4, @hashes[0 .. 3];
      EOF

      meta::function('state', <<'EOF');
      fast_hash(serialize());
      EOF

      meta::function('verify', <<'EOF');
      my $serialized_data = serialize();
      my $state           = state();

      my $temporary_filename = "$0.$state";
      open my $file, '>', $temporary_filename;
      print $file $serialized_data;
      close $file;
      chmod 0700, $temporary_filename;
      chomp(my $observed_state = join '', qx|perl '$temporary_filename' state|);
      my $result = $observed_state eq $state;
      unlink $temporary_filename if $result;
      $result;
      EOF

      meta::function('save', <<'EOF');
      if (verify()) {
        open my $file, '>', $0;
        print $file serialize();
        close $file;
      } else {
        warn 'Verification failed';
      }
      EOF

      meta::function('cat', <<'EOF');
      join "\n", @data{@_};
      EOF

      meta::function('set', <<'EOF');
      $data{$_[0]} = join '', <STDIN>;
      EOF

      meta::function('edit', <<'EOF');
      my $filename = '/tmp/' . rand();
      open my $file, '>', $filename;
      print $file $data{$_[0]};
      close $file;
      system($ENV{EDITOR} || $ENV{VISUAL} || '/usr/bin/nano', $filename);
      open my $file, '<', $filename;
      $data{$_[0]} = join '', <$file>;
      close $file;
      EOF

      meta::code('main', <<'EOF');
      my $initial_state = state();
      my $command = shift @ARGV;
      print &$command(@ARGV);
      save() if state() ne $initial_state;
      EOF

      __END__
    - end
__bf6841f10301900703a4886048832811
meta::section('some-improvements', <<'__0d7075832776a7c9e213b844476f127d');
- sc Some improvements | sec:some-improvements
  Let's step back for a minute and improve things a bit in preparation for some real awesomeness. There are few places that could use improvement. First, there isn't a way to get a list of
  defined attributes on an object without opening it by hand. Second, the interface exposes too many functions to the user; in particular, things like {\tt complete} aren't useful from the
  command line. Finally, every data type we define gets put into {\tt bootstrap::initialization}, which causes $O(n)$ redundancy in the size of the data type constructors.

  - s1 Useful functions | sec:some-improvements-useful-functions
    The most important thing to add is {\tt ls}, which gives you a listing of attributes:\footnote{{\tt object} contains a much more sophisticated version of {\tt ls}. It parses options and
    applies filters to the listing, much like the UNIX {\tt ls} command. I'll go over how to implement this stuff in a later chapter.} Related are {\tt cp} and {\tt rm}, which do what you
    would expect:

    - perl snippets/ls-cp-and-rm-functions << end
      meta::function('ls', <<'EOF');
      join "\n", sort keys %data;
      EOF

      meta::function('cp', <<'EOF');
      $data{$_[1]} = $data{$_[0]};
      EOF

      meta::function('rm', <<'EOF');
      delete @data{@_};
      EOF
    - end

    Another useful function is {\tt create}, which opens an editor for a new attribute:\footnote{We can already do this with {\tt edit}, but {\tt object} doesn't let you edit attributes that
    don't exist. I'll include that behavior in these scripts before too long.}

    - perl snippets/create-function << end
      meta::function('create', <<'EOF');
      return edit($_[0]) if exists $data{$_[0]};
      $data{$_[0]} = $_[1] || "# Attribute $_[0]";
      edit($_[0]);
      EOF
    - end

    Now we can create stuff from inside the shell or command-line and have a civilized text-editor interface to do it.

  - s1 Making some functions internal | sec:some-improvements-making-some-functions-internal
    It would be nice to have a distinction between functions meant for public consumption and functions used just inside the script. For example, nobody's going to call \verb|fnv_hash| from
    the command-line; they'd have to pass it a string in {\tt @ARGV}, which isn't practical. So it's time for a new toplevel mechanism, the \verb|%externalized_functions| table:

    - verbatim << end
      # In bootstrap::initialization:
      my %data;
      my %externalized_functions;
      my %datatypes;
    - end

    \verb|%externalized_functions| maps every callable function to the attribute that defines it, and only the listed functions will be usable directly from the shell or the command-line. This
    has an additional benefit of providing much better autocompletion, since the first word in the REPL always names a function.

    - verbatim << end
      meta::define_form 'data', sub {
        my ($name, $value) = @_;
        $externalized_functions{$name} = "data::$name";
        *{$name} = ...;
      };

      meta::define_form 'function', sub {
        my ($name, $value) = @_;
        $externalized_functions{$name} = "function::$name";
        *{$name} = ...;
      };
    - end

    \noindent And here's the new data type:

    - perl snippets/internal-function-type << end
      meta::define_form 'internal_function', sub {
        my ($name, $value) = @_;
        *{$name} = eval "sub {\n$value\n}";
      };
    - end

    We can now move \verb|fnv_hash|, \verb|fast_hash|, and {\tt complete} into this namespace.

    We'll need to update {\tt shell} and {\tt complete} to leverage this new information:

    - perl snippets/shell-2 << end
      meta::function('shell', <<'EOF');
      use Term::ReadLine;
      my $term = new Term::ReadLine "$0 shell";
      $term->ornaments(0);
      my $output = $term->OUT || \*STDOUT;
      $term->Attribs->{attempted_completion_function} = \&complete;
      while (defined($_ = $term->readline("$0\$ "))) {
        my @args = grep length, split /\s+|("[^"\\]*(?:\\.)?")/o;
        my $function_name = shift @args;
        s/^"(.*)"$/\1/o, s/\\\\"/"/go for @args;

        if ($function_name) {
          if ($externalized_functions{$function_name}) {
            chomp(my $result = eval {&$function_name(@args)});
            warn $@ if $@;
            print $output $result, "\n" unless $@;
          } else {
            warn "Command not found: '$function_name' (use 'ls' to see available commands)";
          }
        }
      }
      EOF
    - end

    - perl snippets/complete-2 << end
      meta::function('complete', <<'EOF');
      my @functions  = sort keys %externalized_functions;
      my @attributes = sort keys %data;
      sub match {
        my ($text, @options) = @_;
        my @matches = sort grep /^$text/, @options;
        if    (@matches == 0) {return undef;}
        elsif (@matches == 1) {return $matches [0];}
        elsif (@matches >  1) {
          return ((longest ($matches [0], $matches [@matches - 1])), @matches);
        }
      }
      sub longest {
        my ($s1, $s2) = @_; 
        return substr ($s1, 0, length $1) if ($s1 ^ $s2) =~ /^(\0*)/;
        return ''; 
      }
      my ($text, $line) = @_;
      if ($line =~ / /) {
        # Start matching attribute names.
        match ($text, @attributes);
      } else {
        # Start of line, so it's a function.
        match ($text, @functions);
      }
      EOF
    - end

  - s1 Separate attributes for data types | sec:some-improvements-separate-attributes-for-data-types
    It's cumbersome to have all of the data types go in {\tt bootstrap::initialization}. Better is to break the code into separate attributes. To do this we'll need to restructure the scripts
    a little bit.

    Up until now the ``stuff first, code second'' approach has worked out all right. But now we want to evaluate stuff at the beginning and at the end, and if this keeps up it could get out of
    hand. Better is to have {\tt serialize} generate a call into some function that will be defined, and do away with {\tt code::} altogether. We can use a new namespace {\tt meta::} for stuff
    that needs to be evaluated at the beginning. So basically, instead of this:

    - verbatim << end
      bootstrap
        types
      functions
      code
    - end

    \noindent we'd have this:

    - verbatim << end
      bootstrap
      meta definitions
      functions
      call to internal::main()
    - end

    Here's what the new {\tt serialize} looks like:

    - perl snippets/serialize-with-internal-main << end
      my @keys = sort keys %data;
      join "\n", $data{'bootstrap::initialization'},
                 map(serialize_single($_),
                   grep( /^meta::/, @keys),
                   grep(!/^meta::/, @keys)),
                 "internal::main();",
                 "__END__";
    - end

    And here's the definition for {\tt meta::} (it's identical to the one we used to have for {\tt code::}). This is the only \verb|define_form| invocation in {\tt bootstrap::initialization};
    the others now reside in their own attributes.

    - perl snippets/define-form-meta << end
      meta::define_form 'meta', sub {
        my ($name, $value) = @_;
        eval $value;
      };
    - end

    Here are the new type definitions:

    - verbatim << end
      meta::meta('type::data', <<'EOF');
      meta::define_form 'data', sub {...};
      EOF
      meta::meta('type::function', <<'EOF');
      meta::define_form 'function', sub {...};
      EOF
      meta::meta('type::bootstrap', <<'EOF');
      meta::define_form 'bootstrap', sub {};
      EOF
      ...
    - end

    - s2 Factoring externalization | sec:some-improvements-data-types-factoring-externalization
      While we're cleaning up meta-stuff, it's worth thinking about factoring out externalization. There isn't a particularly good reason to keep manually assigning to
      \verb|%externalized_functions|; better is to abstract this detail into a function. To do this, we'll want a meta-library:

      - perl snippets/meta-externalize << end
        meta::meta('externalize', <<'EOF');
        sub meta::externalize {
          my ($name, $attribute, $implementation) = @_;
          $externalized_functions{$name} = $attribute;
          *{$name} = $implementation;
        }
        EOF
      - end

      This meta-definition is available to the others because it sorts first.\footnote{Which is a horrible way to manage dependencies, but it's worked so far.} Now instead of manually
      externalizing stuff, data types like {\tt function::} and {\tt data::} can just use {\tt meta::externalize}:

      - perl snippets/function-type-with-externalize << end
        meta::meta('type::function', <<'EOF');
        meta::define_form 'function', sub {
          my ($name, $value) = @_;
          meta::externalize $name, "function::$name", eval "sub {\n$value\n}";
        };
        EOF
      - end

  - s1 Abstracting {\tt \%data} | sec:some-improvements-abstracting-data
    Another issue worth fixing is that you can assign into \verb|%data| arbitrarily, particularly in ways that end up breaking deserialization. For instance, nothing is stopping you from
    creating a key called {\tt foo::bar} even though there isn't a namespace called {\tt foo::}. This problem can be solved at the interface level (i.e.~inside {\tt edit}, {\tt set}, and
    such), but it's probably more useful to go a step further and abstract all access to \verb|%data|.

    Rather than writing to \verb|%data|, then, we'll use an internal function called {\tt associate}; and to read from it we'll use {\tt retrieve}.\footnote{I can't remember why I thought {\tt
    retrieve} was necessary when I wrote {\tt object}. As far as I know it still isn't; it's just there for symmetry I think.} These two functions also benefit from a couple more to separate
    out namespace components. The {\tt namespace} function gives you the base part, and the {\tt attribute} function gives you the rest.\footnote{All four of these functions are taken directly
    from {\tt object}.}

    - perl snippets/namespace-attribute-retrieve-associate-functions << end
      meta::internal_function('namespace', <<'EOF');
      my ($name) = @_;
      $name =~ s/::.*$//;
      $name;
      EOF

      meta::internal_function('attribute', <<'EOF');
      my ($name) = @_;
      $name =~ s/^[^:]*:://;
      $name;
      EOF

      meta::internal_function('retrieve', <<'EOF');
      my @results = map defined $data{$_} ? $data{$_} : file::read($_), @_;
      wantarray ? @results : $results[0];
      EOF

      meta::internal_function('associate', <<'EOF');
      my ($name, $value, %options) = @_;
      my $namespace = namespace($name);
      die "Namespace $namespace does not exist" unless $datatypes{$namespace};
      $data{$name} = $value;
      execute($name) if $options{'execute'};
      EOF
    - end

    - s2 Dynamic execution | sec:some-improvements-abstracting-data-dynamic-execution
      One problem with the way we've defined {\tt cp} is that you'll have to close and reopen the shell to get new functions to take effect. This is because while we're assigning into
      \verb|%data|, we're not calling the handler associated with the namespace. The simplest way to fix this is to dynamically invoke that handler:

      - perl snippets/execute-function << end
        meta::internal_function('execute', <<'EOF');
        my ($name, %options) = @_;
        my $namespace = namespace($name);
        eval {&{"meta::$namespace"}(attribute($name), retrieve($name))};
        warn $@ if $@ && $options{'carp'};
        EOF
      - end

      {\tt associate} is already hooked up to use this function; all you have to do is pass an extra option:

      - verbatim << end
        associate('function::foo', '...', execute => 1);
      - end

  - s1 Final result | sec:some-improvements-final-result
    Integrating all of these improvements into the previous chapter's script yields this monumental piece of work:\footnote{This is the last full listing I'll provide here. The remaining
    chapters cover the concepts required to get from here to {\tt object}. At this point the stuff going on in {\tt object} should more or less make sense, though you'll want to use {\tt ls-a}
    rather than {\tt ls} to get a full listing of attributes.}

    - perl examples/some-improvements << end
      #!/usr/bin/perl
      my %data;
      my %externalized_functions;
      my %datatypes;

      sub meta::define_form {
        my ($namespace, $delegate) = @_;
        $datatypes{$namespace} = $delegate;
        *{"meta::${namespace}::implementation"} = $delegate;
        *{"meta::$namespace"} = sub {
          my ($name, $value) = @_;
          chomp $value;
          $data{"${namespace}::$name"} = $value;
          $delegate->($name, $value);
        };
      }

      meta::define_form 'meta', sub {
        my ($name, $value) = @_;
        eval $value;
      };

      meta::meta('externalize', <<'EOF');
      sub meta::externalize {
        my ($name, $attribute, $implementation) = @_;
        $externalized_functions{$name} = $attribute;
        *{$name} = $implementation;
      }
      EOF

      meta::meta('type::bootstrap', <<'EOF');
      meta::define_form 'bootstrap', sub {};
      EOF

      meta::meta('type::function', <<'EOF');
      meta::define_form 'function', sub {
        my ($name, $body) = @_;
        meta::externalize $name, "function::$name", eval "sub {\n$body\n}";
      };
      EOF

      meta::meta('type::internal_function', <<'EOF');
      meta::define_form 'internal_function', sub {
        my ($name, $value) = @_;
        *{$name} = eval "sub {\n$value\n}";
      };
      EOF

      meta::meta('type::data', <<'EOF');
      meta::define_form 'data', sub {
        # Define a basic editing interface:
        my ($name, $value) = @_;
        meta::externalize $name, "data::$name", sub {
          my ($command, $value) = @_;
          return $data{"data::$name"} unless @_;
          $data{"data::$name"} = $value if $command eq '=';
        };
      };
      EOF

      meta::bootstrap('initialization', <<'EOF');
      #!/usr/bin/perl
      my %data;
      my %externalized_functions;
      my %datatypes;

      sub meta::define_form {
        my ($namespace, $delegate) = @_;
        $datatypes{$namespace} = $delegate;
        *{"meta::${namespace}::implementation"} = $delegate;
        *{"meta::$namespace"} = sub {
          my ($name, $value) = @_;
          chomp $value;
          $data{"${namespace}::$name"} = $value;
          $delegate->($name, $value);
        };
      }

      meta::define_form 'meta', sub {
        my ($name, $value) = @_;
        eval $value;
      };
      EOF

      meta::data('default-action', <<'EOF');
      shell
      EOF

      meta::internal_function('namespace', <<'EOF');
      my ($name) = @_;
      $name =~ s/::.*$//;
      $name;
      EOF

      meta::internal_function('attribute', <<'EOF');
      my ($name) = @_;
      $name =~ s/^[^:]*:://;
      $name;
      EOF

      meta::internal_function('retrieve', <<'EOF');
      my @results = map defined $data{$_} ? $data{$_} : file::read($_), @_;
      wantarray ? @results : $results[0];
      EOF

      meta::internal_function('associate', <<'EOF');
      my ($name, $value, %options) = @_;
      my $namespace = namespace($name);
      die "Namespace $namespace does not exist" unless $datatypes{$namespace};
      $data{$name} = $value;
      execute($name) if $options{'execute'};
      EOF

      meta::internal_function('execute', <<'EOF');
      my ($name, %options) = @_;
      my $namespace = namespace($name);
      eval {&{"meta::$namespace"}(attribute($name), retrieve($name))};
      warn $@ if $@ && $options{'carp'};
      EOF

      meta::function('serialize', <<'EOF');
      my @keys = sort keys %data;
      join "\n", $data{'bootstrap::initialization'},
                 map(serialize_single($_),
                   grep( /^meta::/, @keys),
                   grep(!/^meta::/, @keys)),
                 "internal::main();",
                 "__END__";
      EOF

      meta::function('serialize_single', <<'EOF');
      my ($namespace, $name) = split /::/, $_[0], 2;
      my $marker = '__' . fast_hash($data{$_[0]});
      "meta::$namespace('$name', <<'$marker');\n$data{$_[0]}\n$marker";
      EOF

      meta::function('fnv_hash', <<'EOF');
      my ($data) = @_;
      my ($fnv_prime, $fnv_offset) = (16777619, 2166136261);
      my $hash                     = $fnv_offset;
      my $modulus                  = 2 ** 32;
      $hash = ($hash ^ ($_ & 0xffff) ^ ($_ >> 16)) * $fnv_prime % $modulus
        for unpack 'L*', $data . substr($data, -4) x 8;
      $hash;
      EOF

      meta::function('fast_hash', <<'EOF');
      my ($data)     = @_;
      my $piece_size = length($data) >> 3;
      my @pieces     = (substr($data, $piece_size * 8) . length($data),
                        map(substr($data, $piece_size * $_, $piece_size), 0 .. 7));
      my @hashes     = (fnv_hash($pieces[0]));
      push @hashes, fnv_hash($pieces[$_ + 1] . $hashes[$_]) for 0 .. 7;
      $hashes[$_] ^= $hashes[$_ + 4] >> 16 | ($hashes[$_ + 4] & 0xffff) << 16 for 0 .. 3;
      $hashes[0]  ^= $hashes[8];
      sprintf '%08x' x 4, @hashes[0 .. 3];
      EOF

      meta::function('state', <<'EOF');
      fast_hash(serialize());
      EOF

      meta::function('verify', <<'EOF');
      my $serialized_data = serialize();
      my $state           = state();

      my $temporary_filename = "$0.$state";
      open my $file, '>', $temporary_filename;
      print $file $serialized_data;
      close $file;
      chmod 0700, $temporary_filename;
      chomp(my $observed_state = join '', qx|perl '$temporary_filename' state|);
      my $result = $observed_state eq $state;
      unlink $temporary_filename if $result;
      $result;
      EOF

      meta::function('save', <<'EOF');
      if (verify()) {
        open my $file, '>', $0;
        print $file serialize();
        close $file;
        chmod 0744, $0;
      } else {
        warn 'Verification failed';
      }
      EOF

      meta::function('ls', <<'EOF');
      join "\n", sort keys %data;
      EOF

      meta::function('cp', <<'EOF');
      associate($_[1], retrieve($_[0]));
      EOF

      meta::function('rm', <<'EOF');
      delete @data{@_};
      EOF

      meta::function('cat', <<'EOF');
      join "\n", @data{@_};
      EOF

      meta::function('create', <<'EOF');
      return edit($_[0]) if exists $data{$_[0]};
      associate($_[0], $_[1] || "# Attribute $_[0]");
      edit($_[0]);
      EOF

      meta::function('set', <<'EOF');
      $data{$_[0]} = join '', <STDIN>;
      EOF

      meta::function('complete', <<'EOF');
      my @functions  = sort keys %externalized_functions;
      my @attributes = sort keys %data;
      sub match {
        my ($text, @options) = @_;
        my @matches = sort grep /^$text/, @options;
        if    (@matches == 0) {return undef;}
        elsif (@matches == 1) {return $matches [0];}
        elsif (@matches >  1) {
          return ((longest ($matches [0], $matches [@matches - 1])), @matches);
        }
      }
      sub longest {
        my ($s1, $s2) = @_; 
        return substr ($s1, 0, length $1) if ($s1 ^ $s2) =~ /^(\0*)/;
        return ''; 
      }
      my ($text, $line) = @_;
      if ($line =~ / /) {
        # Start matching attribute names.
        match ($text, @attributes);
      } else {
        # Start of line, so it's a function.
        match ($text, @functions);
      }
      EOF

      meta::internal_function('shell', <<'EOF');
      use Term::ReadLine;
      my $term = new Term::ReadLine "$0 shell";
      $term->ornaments(0);
      my $output = $term->OUT || \*STDOUT;
      $term->Attribs->{attempted_completion_function} = \&complete;
      while (defined($_ = $term->readline("$0\$ "))) {
        my @args = grep length, split /\s+|("[^"\\]*(?:\\.)?")/o;
        my $function_name = shift @args;
        s/^"(.*)"$/\1/o, s/\\\\"/"/go for @args;

        if ($function_name) {
          if ($externalized_functions{$function_name}) {
            chomp(my $result = eval {&$function_name(@args)});
            warn $@ if $@;
            print $output $result, "\n" unless $@;
          } else {
            warn "Command not found: '$function_name' (use 'ls' to see available commands)";
          }
        }
      }
      EOF

      meta::function('edit', <<'EOF');
      my $filename = '/tmp/' . rand();
      open my $file, '>', $filename;
      print $file retrieve($_[0]);
      close $file;
      system($ENV{EDITOR} || $ENV{VISUAL} || '/usr/bin/nano', $filename);
      open my $file, '<', $filename;
      associate($_[0]}, join '', <$file>);
      close $file;
      EOF

      meta::internal_function('internal::main', <<'EOF');
      my $initial_state = state();
      my $command = shift @ARGV || retrieve('data::default-action');
      print &$command(@ARGV);
      save() if state() ne $initial_state;
      EOF

      internal::main();

      __END__
    - end
__0d7075832776a7c9e213b844476f127d
meta::template('comment', '\'\';     # A mechanism for line or block comments.');
meta::template('eval', <<'__eb0b1058649eb2d833f348540516b358');
my $result = eval $_[0];
terminal::warning("Error during template evaluation: $@") if $@;
$result;
__eb0b1058649eb2d833f348540516b358
meta::template('failing_conditional', <<'__5c593329b434a7044f68cec4b77e8ed9');
my ($commands)    = @_;
my $should_return = $commands =~ / if (.*)$/ && ! eval $1;
terminal::warning("eval of template condition failed: $@") if $@;
$should_return;
__5c593329b434a7044f68cec4b77e8ed9
meta::template('include', <<'__e0624844a65ae41e0217dd871fc0dbfb');
my ($commands) = @_;
return '' if template::failing_conditional($commands);
join "\n", map retrieve($_), split /\s+/, $commands;
__e0624844a65ae41e0217dd871fc0dbfb
meta::template('item[]', '"\\\\item[$_[0]]";');
meta::template('pinclude', <<'__5ba61c3034a4b183881936aec30d2be9');
# Just like the regular include, but makes sure to insert paragraph boundaries
# (this is required for SDoc to function properly).

my ($commands) = @_;
return '' if template::failing_conditional($commands);
my $text = join "\n\n", map retrieve($_), split /\s+/, $commands;
"\n\n$text\n\n";
__5ba61c3034a4b183881936aec30d2be9
meta::vim_highlighter('cltex', <<'__428c1e08cdadbb52c32d5e49b411b0f8');
" Cleaner TeX
" Maintainer: Spencer Tipping <spencer@spencertipping.com>
" Language:   Cleaner TeX (a variant of LaTeX with support for a bunch of embedded languages)

if version < 600
  syntax clear
elseif exists("b:current_syntax")
  finish
endif

syn match   cltEofMarker   /<<\s*\w\+/ contained
syn region  cltLineComment matchgroup=cltCode start=/^\s*- comment / end=/$/ contained
syn match   cltLine        /^\s*- .*$/ contains=cltEofMarker,cltLineComment

syn include @cpp           syntax/cpp.vim        | unlet b:current_syntax
syn include @java          syntax/java.vim       | unlet b:current_syntax
syn include @asm           syntax/asm.vim        | unlet b:current_syntax
syn include @javascript    syntax/javascript.vim | unlet b:current_syntax
syn include @html          syntax/html.vim       | unlet b:current_syntax
syn include @perl          syntax/perl.vim       | unlet b:current_syntax

syn region  cltCpp         matchgroup=cltCode start=/^\z(\s*\)- cpp .*<<\s*\z(\w\+\)$/        end=/^\z1- \z2$/ contains=@cpp
syn region  cltJava        matchgroup=cltCode start=/^\z(\s*\)- java .*<<\s*\z(\w\+\)$/       end=/^\z1- \z2$/ contains=@java
syn region  cltAsm         matchgroup=cltCode start=/^\z(\s*\)- asm .*<<\s*\z(\w\+\)$/        end=/^\z1- \z2$/ contains=@asm
syn region  cltJavascript  matchgroup=cltCode start=/^\z(\s*\)- javascript .*<<\s*\z(\w\+\)$/ end=/^\z1- \z2$/ contains=@javascript
syn region  cltHtml        matchgroup=cltCode start=/^\z(\s*\)- html .*<<\s*\z(\w\+\)$/       end=/^\z1- \z2$/ contains=@html
syn region  cltPerl        matchgroup=cltCode start=/^\z(\s*\)- perl .*<<\s*\z(\w\+\)$/       end=/^\z1- \z2$/ contains=@perl
syn region  cltResource    matchgroup=cltCode start=/^\z(\s*\)- resource .*<<\s*\z(\w\+\)$/   end=/^\z1- \z2$/
syn region  cltComment     matchgroup=cltCode start=/^\z(\s*\)- comment .*<<\s*\z(\w\+\)$/    end=/^\z1- \z2$/

syn cluster cltStuff       add=cltCpp,cltJava,cltAsm,cltJavascript,cltHtml,cltResource,cltComment,cltLine

syn region  cltDocument    start=/\%^/ end=/\%$/ contains=@cltStuff

hi link cltLine            Special
hi link cltKeyword         String
hi link cltResource        String
hi link cltEofMarker       String

hi link cltCode            Special
hi link cltDocument        Comment
hi link cltComment         Type
hi link cltLineComment     Type

let b:current_syntax = "cltex"
__428c1e08cdadbb52c32d5e49b411b0f8
internal::main();

__END__